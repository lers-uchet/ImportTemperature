//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Lers.Api
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class EquipmentClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public EquipmentClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl; 
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Возвращает список оборудования.</summary>
        /// <param name="id">Список идентификаторов оборудования, которые необходимо получить, либо	пустой список если необходим весь список.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetEquipmentListResponseParameters> GetEquipmentListAsync(System.Collections.Generic.IEnumerable<int> id)
        {
            return GetEquipmentListAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Возвращает список оборудования.</summary>
        /// <param name="id">Список идентификаторов оборудования, которые необходимо получить, либо	пустой список если необходим весь список.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetEquipmentListResponseParameters> GetEquipmentListAsync(System.Collections.Generic.IEnumerable<int> id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Core/Equipment?");
            if (id != null) 
            {
                foreach (var item_ in id) { urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEquipmentListResponseParameters>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new LersException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetEquipmentListResponseParameters);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Возвращает оборудование по идентификатору.</summary>
        /// <param name="id">Идентификатор оборудования.</param>
        /// <param name="getBindings">Отмечает необходимость получения привязки устройства к точкам учета.</param>
        /// <param name="getReduced">Отмечает необходимость получения сокращённой информации об оборудовании (только основные свойства и модель).</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetEquipmentResponseParameters> GetEquipmentAsync(int id, bool? getBindings, bool? getReduced)
        {
            return GetEquipmentAsync(id, getBindings, getReduced, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Возвращает оборудование по идентификатору.</summary>
        /// <param name="id">Идентификатор оборудования.</param>
        /// <param name="getBindings">Отмечает необходимость получения привязки устройства к точкам учета.</param>
        /// <param name="getReduced">Отмечает необходимость получения сокращённой информации об оборудовании (только основные свойства и модель).</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetEquipmentResponseParameters> GetEquipmentAsync(int id, bool? getBindings, bool? getReduced, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Core/Equipment/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (getBindings != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("getBindings") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getBindings, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (getReduced != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("getReduced") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getReduced, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEquipmentResponseParameters>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new LersException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetEquipmentResponseParameters);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new LersException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new LersException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class LoginClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public LoginClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl; 
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Входит в систему с помощью текстового логина и пароля.</summary>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LoginResponseParameters> LoginPlainAsync(AuthenticatePlainRequestParameters body)
        {
            return LoginPlainAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Входит в систему с помощью текстового логина и пароля.</summary>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LoginResponseParameters> LoginPlainAsync(AuthenticatePlainRequestParameters body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Login");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LoginResponseParameters>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new LersException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(LoginResponseParameters);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Входит в систему с помощью доменной авторизации.</summary>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LoginResponseParameters> LoginWindowsAsync(AuthenticateRequestParameters body)
        {
            return LoginWindowsAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Входит в систему с помощью доменной авторизации.</summary>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LoginResponseParameters> LoginWindowsAsync(AuthenticateRequestParameters body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Login/Domain");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LoginResponseParameters>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new LersException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(LoginResponseParameters);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Возвращает информацию о текущем пользователе.</summary>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CurrentLoginInfo> GetCurrentLoginAsync()
        {
            return GetCurrentLoginAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Возвращает информацию о текущем пользователе.</summary>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CurrentLoginInfo> GetCurrentLoginAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Login/Current");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CurrentLoginInfo>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new LersException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CurrentLoginInfo);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new LersException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new LersException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class MeasurePointConsumptionClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public MeasurePointConsumptionClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl; 
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Возвращает потребление по точке учёта за период.</summary>
        /// <param name="id">Идентификатор точки учёта.</param>
        /// <param name="start">Дата начала периода.</param>
        /// <param name="end">Дата окончания периода.</param>
        /// <param name="dataTypes">Тип данных. Может использоваться комбинация флагов для получения сразу нескольких таблиц с разными типами данных.</param>
        /// <param name="electricDataKind">Вид данных по электроэнергии (исходные или реальные).</param>
        /// <param name="includeCalculated">Выдавать рассчитанные записи.</param>
        /// <param name="includeAbsentRecords">Значение, определяющее, необходимость включения в выдачу отсутствующих меток времени в виде пустых записей.</param>
        /// <param name="units">Типы единиц измерения в которых необходимо вернуть данные по точке учёта.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetMeasurePointConsumptionResponse> GetConsumptionAsync(int id, System.DateTimeOffset start, System.DateTimeOffset end, DeviceDataType? dataTypes, ElectricDataKind? electricDataKind, bool? includeCalculated, bool? includeAbsentRecords, MeasurePointDataUnitsRequestType? units)
        {
            return GetConsumptionAsync(id, start, end, dataTypes, electricDataKind, includeCalculated, includeAbsentRecords, units, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Возвращает потребление по точке учёта за период.</summary>
        /// <param name="id">Идентификатор точки учёта.</param>
        /// <param name="start">Дата начала периода.</param>
        /// <param name="end">Дата окончания периода.</param>
        /// <param name="dataTypes">Тип данных. Может использоваться комбинация флагов для получения сразу нескольких таблиц с разными типами данных.</param>
        /// <param name="electricDataKind">Вид данных по электроэнергии (исходные или реальные).</param>
        /// <param name="includeCalculated">Выдавать рассчитанные записи.</param>
        /// <param name="includeAbsentRecords">Значение, определяющее, необходимость включения в выдачу отсутствующих меток времени в виде пустых записей.</param>
        /// <param name="units">Типы единиц измерения в которых необходимо вернуть данные по точке учёта.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetMeasurePointConsumptionResponse> GetConsumptionAsync(int id, System.DateTimeOffset start, System.DateTimeOffset end, DeviceDataType? dataTypes, ElectricDataKind? electricDataKind, bool? includeCalculated, bool? includeAbsentRecords, MeasurePointDataUnitsRequestType? units, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (start == null)
                throw new System.ArgumentNullException("start");
    
            if (end == null)
                throw new System.ArgumentNullException("end");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Data/MeasurePoints/{id}/Consumption/{start}/{end}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{start}", System.Uri.EscapeDataString(start.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{end}", System.Uri.EscapeDataString(end.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));
            if (dataTypes != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DataTypes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dataTypes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (electricDataKind != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ElectricDataKind") + "=").Append(System.Uri.EscapeDataString(ConvertToString(electricDataKind, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCalculated != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeCalculated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCalculated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeAbsentRecords != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeAbsentRecords") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeAbsentRecords, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Units") + "=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetMeasurePointConsumptionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new LersException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetMeasurePointConsumptionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Сохраняет показания текущих архивных данных по точке учёта.</summary>
        /// <param name="id">Идентификатор точки учёта.</param>
        /// <param name="overwriteExisting">Указывает на то, что необходимо перезаписать существующие данные.</param>
        /// <param name="electricDataKind">Вид значений по электроэнергии (исходные/реальные).</param>
        /// <param name="body">Данные для сохранения.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SetCurrentArchiveAsync(int id, bool? overwriteExisting, ElectricDataKind? electricDataKind, SaveConsumptionRequestParameters body)
        {
            return SetCurrentArchiveAsync(id, overwriteExisting, electricDataKind, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Сохраняет показания текущих архивных данных по точке учёта.</summary>
        /// <param name="id">Идентификатор точки учёта.</param>
        /// <param name="overwriteExisting">Указывает на то, что необходимо перезаписать существующие данные.</param>
        /// <param name="electricDataKind">Вид значений по электроэнергии (исходные/реальные).</param>
        /// <param name="body">Данные для сохранения.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SetCurrentArchiveAsync(int id, bool? overwriteExisting, ElectricDataKind? electricDataKind, SaveConsumptionRequestParameters body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Data/MeasurePoints/{id}/Consumption/CurrentArchive?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (overwriteExisting != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OverwriteExisting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(overwriteExisting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (electricDataKind != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ElectricDataKind") + "=").Append(System.Uri.EscapeDataString(ConvertToString(electricDataKind, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new LersException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new LersException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new LersException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class MeasurePointsClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public MeasurePointsClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl; 
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Возвращает список точек учёта.</summary>
        /// <param name="type">Тип точек учёта, которые необходимо получить.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetMeasurePointListResponseParameters> GetMeasurePointsAsync(bool? getEquipment, bool? getAttributes, MeasurePointType? type)
        {
            return GetMeasurePointsAsync(getEquipment, getAttributes, type, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Возвращает список точек учёта.</summary>
        /// <param name="type">Тип точек учёта, которые необходимо получить.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetMeasurePointListResponseParameters> GetMeasurePointsAsync(bool? getEquipment, bool? getAttributes, MeasurePointType? type, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Core/MeasurePoints?");
            if (getEquipment != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("GetEquipment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getEquipment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (getAttributes != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("GetAttributes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getAttributes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetMeasurePointListResponseParameters>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new LersException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetMeasurePointListResponseParameters);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Возвращает точку учёта с указанным идентификатором.</summary>
        /// <param name="id">Идентификатор точки учёта.</param>
        /// <param name="getDiagParams">Указывает, что необходимо получить настройки диагностики для точки учета.</param>
        /// <param name="getAutoPollTask">Указывает, что необходимо получить свойства задания на автоопрос.</param>
        /// <param name="getDevice">Указывает, что необходимо получить свойства Устройства, к которому подключена точка учета.</param>
        /// <param name="getDeviceReduced">Указывает что нужно получить сокращённые свойства оборудования (только базовые параметры и модель).</param>
        /// <param name="getDeviceBinding">Указывает, что необходимо получить привязку магистралей точки учета к каналам, ячейка и адресам устройства, к которому подключена точка учета.</param>
        /// <param name="getHeatLoss">Указывает, что необходимо получить Теплопотери.</param>
        /// <param name="getSensor">Указывает, что необходимо получить список датчиков точки учета.</param>
        /// <param name="getReports">Указывает, что необходимо получить список отчетных форм для точек учета.</param>
        /// <param name="getCounter">Указывает, что необходимо получить информацию о счетчике.</param>
        /// <param name="getAttributes">Указывает, что необходимо вернуть атрибуты точки учета.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetMeasurePointResponseParameters> GetByIdAsync(int id, bool? getDiagParams, bool? getAutoPollTask, bool? getDevice, bool? getDeviceReduced, bool? getDeviceBinding, bool? getHeatLoss, bool? getSensor, bool? getReports, bool? getCounter, bool? getAttributes)
        {
            return GetByIdAsync(id, getDiagParams, getAutoPollTask, getDevice, getDeviceReduced, getDeviceBinding, getHeatLoss, getSensor, getReports, getCounter, getAttributes, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Возвращает точку учёта с указанным идентификатором.</summary>
        /// <param name="id">Идентификатор точки учёта.</param>
        /// <param name="getDiagParams">Указывает, что необходимо получить настройки диагностики для точки учета.</param>
        /// <param name="getAutoPollTask">Указывает, что необходимо получить свойства задания на автоопрос.</param>
        /// <param name="getDevice">Указывает, что необходимо получить свойства Устройства, к которому подключена точка учета.</param>
        /// <param name="getDeviceReduced">Указывает что нужно получить сокращённые свойства оборудования (только базовые параметры и модель).</param>
        /// <param name="getDeviceBinding">Указывает, что необходимо получить привязку магистралей точки учета к каналам, ячейка и адресам устройства, к которому подключена точка учета.</param>
        /// <param name="getHeatLoss">Указывает, что необходимо получить Теплопотери.</param>
        /// <param name="getSensor">Указывает, что необходимо получить список датчиков точки учета.</param>
        /// <param name="getReports">Указывает, что необходимо получить список отчетных форм для точек учета.</param>
        /// <param name="getCounter">Указывает, что необходимо получить информацию о счетчике.</param>
        /// <param name="getAttributes">Указывает, что необходимо вернуть атрибуты точки учета.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetMeasurePointResponseParameters> GetByIdAsync(int id, bool? getDiagParams, bool? getAutoPollTask, bool? getDevice, bool? getDeviceReduced, bool? getDeviceBinding, bool? getHeatLoss, bool? getSensor, bool? getReports, bool? getCounter, bool? getAttributes, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Core/MeasurePoints/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (getDiagParams != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("GetDiagParams") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getDiagParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (getAutoPollTask != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("GetAutoPollTask") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getAutoPollTask, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (getDevice != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("GetDevice") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getDevice, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (getDeviceReduced != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("GetDeviceReduced") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getDeviceReduced, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (getDeviceBinding != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("GetDeviceBinding") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getDeviceBinding, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (getHeatLoss != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("GetHeatLoss") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getHeatLoss, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (getSensor != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("GetSensor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getSensor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (getReports != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("GetReports") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getReports, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (getCounter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("GetCounter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getCounter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (getAttributes != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("GetAttributes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getAttributes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetMeasurePointResponseParameters>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new LersException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetMeasurePointResponseParameters);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new LersException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new LersException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class MeasurePointTotalsClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public MeasurePointTotalsClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl; 
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Возвращает интеграторы по точке учёта за период.</summary>
        /// <param name="id">Идентификатор точки учёта.</param>
        /// <param name="start">Дата начала периода.</param>
        /// <param name="end">Дата окончания периода.</param>
        /// <param name="electricDataKind">Вид данных по электроэнергии (исходные или реальные).</param>
        /// <param name="includeCalculated">Выдавать рассчитанные записи.</param>
        /// <param name="includeAbsentRecords">Значение, определяющее, необходимость включения в выдачу отсутствующих меток времени в виде пустых записей.</param>
        /// <param name="units">Типы единиц измерения в которых необходимо вернуть данные по точке учёта.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetMeasurePointTotalsResponse> GetTotalsAsync(int id, System.DateTimeOffset start, System.DateTimeOffset end, ElectricDataKind? electricDataKind, bool? includeCalculated, bool? includeAbsentRecords, MeasurePointDataUnitsRequestType? units)
        {
            return GetTotalsAsync(id, start, end, electricDataKind, includeCalculated, includeAbsentRecords, units, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Возвращает интеграторы по точке учёта за период.</summary>
        /// <param name="id">Идентификатор точки учёта.</param>
        /// <param name="start">Дата начала периода.</param>
        /// <param name="end">Дата окончания периода.</param>
        /// <param name="electricDataKind">Вид данных по электроэнергии (исходные или реальные).</param>
        /// <param name="includeCalculated">Выдавать рассчитанные записи.</param>
        /// <param name="includeAbsentRecords">Значение, определяющее, необходимость включения в выдачу отсутствующих меток времени в виде пустых записей.</param>
        /// <param name="units">Типы единиц измерения в которых необходимо вернуть данные по точке учёта.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetMeasurePointTotalsResponse> GetTotalsAsync(int id, System.DateTimeOffset start, System.DateTimeOffset end, ElectricDataKind? electricDataKind, bool? includeCalculated, bool? includeAbsentRecords, MeasurePointDataUnitsRequestType? units, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (start == null)
                throw new System.ArgumentNullException("start");
    
            if (end == null)
                throw new System.ArgumentNullException("end");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Data/MeasurePoints/{id}/Totals/{start}/{end}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{start}", System.Uri.EscapeDataString(start.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{end}", System.Uri.EscapeDataString(end.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));
            if (electricDataKind != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ElectricDataKind") + "=").Append(System.Uri.EscapeDataString(ConvertToString(electricDataKind, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCalculated != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeCalculated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCalculated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeAbsentRecords != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IncludeAbsentRecords") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeAbsentRecords, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Units") + "=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetMeasurePointTotalsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new LersException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetMeasurePointTotalsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Сохраняет показания интеграторов по точке учёта.</summary>
        /// <param name="id">Идентификатор точки учёта.</param>
        /// <param name="overwriteExisting">Отмечает необходимость перезаписи существующих данных.</param>
        /// <param name="body">Данные для сохранения.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SetTotalsAsync(int id, bool? overwriteExisting, SaveTotalsRequestParameters body)
        {
            return SetTotalsAsync(id, overwriteExisting, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Сохраняет показания интеграторов по точке учёта.</summary>
        /// <param name="id">Идентификатор точки учёта.</param>
        /// <param name="overwriteExisting">Отмечает необходимость перезаписи существующих данных.</param>
        /// <param name="body">Данные для сохранения.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SetTotalsAsync(int id, bool? overwriteExisting, SaveTotalsRequestParameters body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Data/MeasurePoints/{id}/Totals?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (overwriteExisting != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("overwriteExisting") + "=").Append(System.Uri.EscapeDataString(ConvertToString(overwriteExisting, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new LersException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new LersException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new LersException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class TerritoriesClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public TerritoriesClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl; 
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Возвращает список всех территорий.</summary>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Territory>> GetListAsync()
        {
            return GetListAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Возвращает список всех территорий.</summary>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Territory>> GetListAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Core/Territories");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Territory>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new LersException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<Territory>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Возвращает территорию по уникальному идентификатору.</summary>
        /// <param name="id">Идентификатор запрошенной территории.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Territory> GetByIdAsync(int id)
        {
            return GetByIdAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Возвращает территорию по уникальному идентификатору.</summary>
        /// <param name="id">Идентификатор запрошенной территории.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Territory> GetByIdAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Core/Territories/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Territory>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new LersException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Territory);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new LersException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new LersException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class WeatherClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public WeatherClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl; 
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Возвращает среднесуточные температуры для указанной территории.</summary>
        /// <param name="id">Идентификатор территории.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TerritoryOutdoorTemperature>> GetAsync(int id)
        {
            return GetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Возвращает среднесуточные температуры для указанной территории.</summary>
        /// <param name="id">Идентификатор территории.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TerritoryOutdoorTemperature>> GetAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Data/Territories/{id}/Weather");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TerritoryOutdoorTemperature>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new LersException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<TerritoryOutdoorTemperature>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Сохраняет среднесуточные температуры по территории.</summary>
        /// <param name="id">Идентификатор территории.</param>
        /// <param name="body">Устанавливаемые значения.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SetAsync(int id, System.Collections.Generic.IEnumerable<TerritoryOutdoorTemperature> body)
        {
            return SetAsync(id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Сохраняет среднесуточные температуры по территории.</summary>
        /// <param name="id">Идентификатор территории.</param>
        /// <param name="body">Устанавливаемые значения.</param>
        /// <returns>Success</returns>
        /// <exception cref="LersException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SetAsync(int id, System.Collections.Generic.IEnumerable<TerritoryOutdoorTemperature> body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Data/Territories/{id}/Weather");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LersException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new LersException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new LersException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new LersException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    /// <summary>Определяет поддерживаемые типы каналов связи.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CommunicationLink
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Direct")]
        Direct = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dialup")]
        Dialup = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gsm")]
        Gsm = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gprs")]
        Gprs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ip")]
        Ip = 5,
    
    }
    
    /// <summary>Вид управления потоком при обмене данными через последовательный порт.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FlowControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Off")]
        Off = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XonXoff")]
        XonXoff = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hardware")]
        Hardware = 3,
    
    }
    
    /// <summary>Тип GSM-вызова.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum GsmCallType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Voice")]
        Voice = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Csd")]
        Csd = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sms")]
        Sms = 3,
    
    }
    
    /// <summary>Характеристики оборудования.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum EquipmentCapabilities
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gauge")]
        Gauge = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CommunicationDevice")]
        CommunicationDevice = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Regulator")]
        Regulator = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Signaling")]
        Signaling = 4,
    
    }
    
    /// <summary>Тип инженерной системы учета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SystemType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Heat")]
        Heat = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HotWater")]
        HotWater = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ColdWater")]
        ColdWater = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Steam")]
        Steam = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gas")]
        Gas = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Electricity")]
        Electricity = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sewage")]
        Sewage = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Control")]
        Control = 8,
    
    }
    
    /// <summary>Возможности коммуникационного контроллера.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ControllerFeatures
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GprsSupportsStopCommand")]
        GprsSupportsStopCommand = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SupportsConcurrentReading")]
        SupportsConcurrentReading = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SelfConnected")]
        SelfConnected = 3,
    
    }
    
    /// <summary>Маска поддерживаемых скоростей обмена через COM-порт.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ComPortSpeed
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Baud_1200")]
        Baud_1200 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Baud_2400")]
        Baud_2400 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Baud_4800")]
        Baud_4800 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Baud_9600")]
        Baud_9600 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Baud_14400")]
        Baud_14400 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Baud_19200")]
        Baud_19200 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Baud_28800")]
        Baud_28800 = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Baud_38400")]
        Baud_38400 = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Baud_57600")]
        Baud_57600 = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Baud_115200")]
        Baud_115200 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Baud_300")]
        Baud_300 = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Baud_600")]
        Baud_600 = 12,
    
    }
    
    /// <summary>Условие использования сетевого адреса устройства.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum NetworkAddressUsage
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UseSerialNumber")]
        UseSerialNumber = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Required")]
        Required = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MayBeEmpty")]
        MayBeEmpty = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RequiredMayUseSerial")]
        RequiredMayUseSerial = 4,
    
    }
    
    /// <summary>Возможности цифрового интерфейса.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DataInterfaceFeatures
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SupportsPassword")]
        SupportsPassword = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HexPasswordInput")]
        HexPasswordInput = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SupportsSecondLevelPassword")]
        SupportsSecondLevelPassword = 3,
    
    }
    
    /// <summary>Статус драйвера устройства</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DriverStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"InDevelopment")]
        InDevelopment = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PreRelease")]
        PreRelease = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Release")]
        Release = 2,
    
    }
    
    /// <summary>Свойства прибора учета, входящие в битовую маску FeaturesMask, и зависящие от его модели.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DeviceFeature
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValueMultiplierRequired")]
        ValueMultiplierRequired = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CanControlModem")]
        CanControlModem = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UseDeviceChannel")]
        UseDeviceChannel = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Reserved_3")]
        Reserved_3 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeviceDetectSupported")]
        DeviceDetectSupported = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AdapterRequired")]
        AdapterRequired = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UseDeviceCell")]
        UseDeviceCell = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UseDeviceAddress")]
        UseDeviceAddress = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MultipleArchiveTotalsRecords")]
        MultipleArchiveTotalsRecords = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NeedsAdvancedTotalsInterpolationAlgorithm")]
        NeedsAdvancedTotalsInterpolationAlgorithm = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PollHeatLeadInAsDevice")]
        PollHeatLeadInAsDevice = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AdvancedChannelBinding")]
        AdvancedChannelBinding = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TotalsBinding")]
        TotalsBinding = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Reserved_13")]
        Reserved_13 = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SpecifyAddressDataType")]
        SpecifyAddressDataType = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChannelNumberHexInput")]
        ChannelNumberHexInput = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TimeCorrectionSupported")]
        TimeCorrectionSupported = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AddressHexInput")]
        AddressHexInput = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ServerCalcConsumption")]
        ServerCalcConsumption = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulseSupported")]
        PulseSupported = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Reserved_20")]
        Reserved_20 = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SpecifyCellUnit")]
        SpecifyCellUnit = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadControlSupported")]
        LoadControlSupported = 23,
    
    }
    
    /// <summary>Маска типов данных, которые возможно снять с устройства.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DeviceDataType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeviceConfig")]
        DeviceConfig = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Events")]
        Events = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Current")]
        Current = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Interval")]
        Interval = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hour")]
        Hour = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PowerProfile")]
        PowerProfile = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Totals")]
        Totals = 9,
    
    }
    
    /// <summary>Модель ячейки оборудования.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Cell 
    {
        /// <summary>Идентификатор ячейки.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Отображаемое имя.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Тип данных ячейки.</summary>
        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceDataType DataType { get; set; }
    
        /// <summary>Идентификатор модели оборудования, к которой относится ячейка.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentModelId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EquipmentModelId { get; set; }
    
        /// <summary>Код драйвера.</summary>
        [Newtonsoft.Json.JsonProperty("driverCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DriverCode { get; set; }
    
    
    }
    
    /// <summary>Адаптер устройства.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Adapter 
    {
        /// <summary>Уникальный идентификатор модели адаптера.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Идентификатор модели оборудования, к которой относится адаптер.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentModelId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EquipmentModelId { get; set; }
    
        /// <summary>Наименование.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>Флаг, определяющий, нужно ли задавать адрес для адаптера.</summary>
        [Newtonsoft.Json.JsonProperty("isAddressRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAddressRequired { get; set; }
    
    
    }
    
    /// <summary>Протокол устройства.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Protocol 
    {
        /// <summary>Идентификатор.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Номер протокола устройства.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Number { get; set; }
    
        /// <summary>Наименование протокола.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
    
    }
    
    /// <summary>Идентификаторы общих для всех устройств настроечных параметров</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum GeneralDeviceConfigParam
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SerialNumber")]
        SerialNumber = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NetworkAddress")]
        NetworkAddress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SoftwareVersion")]
        SoftwareVersion = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hardware")]
        Hardware = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CheckoutDate")]
        CheckoutDate = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CheckoutHour")]
        CheckoutHour = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scheme1")]
        Scheme1 = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SettingsChecksum")]
        SettingsChecksum = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CurrentTransformationCoeff")]
        CurrentTransformationCoeff = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VoltageTransformationCoeff")]
        VoltageTransformationCoeff = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ColdWaterTemp")]
        ColdWaterTemp = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ColdWaterPress")]
        ColdWaterPress = 12,
    
    }
    
    /// <summary>Параметр БД прибора</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DeviceConfigParam 
    {
        /// <summary>Идентификатор</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Наименование параметра</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>Комментарий к параметру</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        /// <summary>Тип данных параметра</summary>
        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DataType { get; set; }
    
        /// <summary>Описание системного параметра</summary>
        [Newtonsoft.Json.JsonProperty("generalParamType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GeneralDeviceConfigParam GeneralParamType { get; set; }
    
        /// <summary>Номер теплового ввода, к которому относится параметр</summary>
        [Newtonsoft.Json.JsonProperty("heatLeadInNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HeatLeadInNum { get; set; }
    
        /// <summary>Номер канала, к которому относится параметр</summary>
        [Newtonsoft.Json.JsonProperty("channelNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChannelNum { get; set; }
    
        /// <summary>Идентификатор модели оборудования, к которой относятся параметры базы настроек.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentModelId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EquipmentModelId { get; set; }
    
        /// <summary>Адрес, откуда должен считываться параметр.</summary>
        [Newtonsoft.Json.JsonProperty("readAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReadAddress { get; set; }
    
        /// <summary>Тип данных для чтения.</summary>
        [Newtonsoft.Json.JsonProperty("readDataType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReadDataType { get; set; }
    
        /// <summary>Код драйвера, по которому сохраняется параметр.</summary>
        [Newtonsoft.Json.JsonProperty("driverCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DriverCode { get; set; }
    
    
    }
    
    /// <summary>Интерфейс драйвера для оборудования.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EquipmentDriverInterface 
    {
        /// <summary>Наименование драйвера для этого оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("driverName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DriverName { get; set; }
    
        /// <summary>Статус драйвера устройства.</summary>
        [Newtonsoft.Json.JsonProperty("driverStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DriverStatus DriverStatus { get; set; }
    
        /// <summary>Количество каналов устройства в каждом тепловом вводе.</summary>
        [Newtonsoft.Json.JsonProperty("channelCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ChannelCount { get; set; }
    
        /// <summary>Количество тепловых вводов.</summary>
        [Newtonsoft.Json.JsonProperty("heatSystemCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HeatSystemCount { get; set; }
    
        /// <summary>Минимальный адрес памяти устройства.</summary>
        [Newtonsoft.Json.JsonProperty("minMemoryAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MinMemoryAddress { get; set; }
    
        /// <summary>Максимальный адрес памяти устройства.</summary>
        [Newtonsoft.Json.JsonProperty("maxMemoryAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxMemoryAddress { get; set; }
    
        /// <summary>Возможности устройства и драйвера.</summary>
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceFeature Features { get; set; }
    
        /// <summary>Типы данных (архивов), которые можно считать с устройства.</summary>
        [Newtonsoft.Json.JsonProperty("supportedDataTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceDataType SupportedDataTypes { get; set; }
    
        /// <summary>Пороговая величина, после которой наступает сброс значения интегратора массы.</summary>
        [Newtonsoft.Json.JsonProperty("totalsResetThresholdM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalsResetThresholdM { get; set; }
    
        /// <summary>Пороговая величина, после которой наступает сброс значения интегратора тепла.</summary>
        [Newtonsoft.Json.JsonProperty("totalsResetThresholdQ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalsResetThresholdQ { get; set; }
    
        /// <summary>Список всех ячеек в данной модели устройства.</summary>
        [Newtonsoft.Json.JsonProperty("cells", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Cell> Cells { get; set; }
    
        /// <summary>Список адаптеров, поддерживаемых устройством.</summary>
        [Newtonsoft.Json.JsonProperty("adapters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Adapter> Adapters { get; set; }
    
        /// <summary>Список протоколов, поддерживаемых устройством.</summary>
        [Newtonsoft.Json.JsonProperty("protocols", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Protocol> Protocols { get; set; }
    
        /// <summary>Список параметров БД устройства.</summary>
        [Newtonsoft.Json.JsonProperty("configParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeviceConfigParam> ConfigParams { get; set; }
    
    
    }
    
    /// <summary>Определяет поддерживаемые биты четности обмена через COM-порт.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Parity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotSet")]
        NotSet = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Odd")]
        Odd = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Even")]
        Even = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mark")]
        Mark = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Space")]
        Space = 5,
    
    }
    
    /// <summary>Определяет количество стоп-битов при обмене через COM-порт.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum StopBits
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"One")]
        One = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OnePointFive")]
        OnePointFive = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Two")]
        Two = 3,
    
    }
    
    /// <summary>Определяет количество бит данных при обмене через COM-порт.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DataBits
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Seven")]
        Seven = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Eight")]
        Eight = 2,
    
    }
    
    /// <summary>Интерфейс обмена данными с оборудованием.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EquipmentDataInterface 
    {
        /// <summary>Строка инициализации порта при прямом подключении к устройству.</summary>
        [Newtonsoft.Json.JsonProperty("portSettings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PortSettings { get; set; }
    
        /// <summary>Список поддерживаемых скоростей обмена через COM-порт.</summary>
        [Newtonsoft.Json.JsonProperty("supportedPortSpeeds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ComPortSpeed SupportedPortSpeeds { get; set; }
    
        /// <summary>Список поддерживаемых вариантов контроля потока данных при прямом подключении к устройству.</summary>
        [Newtonsoft.Json.JsonProperty("supportedFlowControls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FlowControl SupportedFlowControls { get; set; }
    
        /// <summary>Пароль для доступа по умолчанию.</summary>
        [Newtonsoft.Json.JsonProperty("defaultPassword", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultPassword { get; set; }
    
        /// <summary>Регулярное выражение, используемое для контроля пользовательского ввода пароля.</summary>
        [Newtonsoft.Json.JsonProperty("passwordRegEx", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PasswordRegEx { get; set; }
    
        /// <summary>Комментарий к паролю.</summary>
        [Newtonsoft.Json.JsonProperty("passwordComment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PasswordComment { get; set; }
    
        /// <summary>Комментарий к паролю.</summary>
        [Newtonsoft.Json.JsonProperty("secondLevelPasswordComment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecondLevelPasswordComment { get; set; }
    
        /// <summary>Максимальное количество устройств в одной сети. 0 - не ограничено.</summary>
        [Newtonsoft.Json.JsonProperty("maxNetworkSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxNetworkSize { get; set; }
    
        /// <summary>Сетевой адрес по умолчанию.</summary>
        [Newtonsoft.Json.JsonProperty("networkAddressDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NetworkAddressDefault { get; set; }
    
        /// <summary>Способ использования сетевого адреса.</summary>
        [Newtonsoft.Json.JsonProperty("networkAddressUsage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NetworkAddressUsage NetworkAddressUsage { get; set; }
    
        /// <summary>Комментарий по формату сетевого адреса.</summary>
        [Newtonsoft.Json.JsonProperty("networkAddressComment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NetworkAddressComment { get; set; }
    
        /// <summary>Регулярное выражение, используемое для контроля пользовательского ввода сетевого адреса.</summary>
        [Newtonsoft.Json.JsonProperty("networkAddressRegEx", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NetworkAddressRegEx { get; set; }
    
        /// <summary>Минимальное значение сетевого адреса, если он задается в виде целого числа.</summary>
        [Newtonsoft.Json.JsonProperty("networkAddressRangeMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NetworkAddressRangeMin { get; set; }
    
        /// <summary>Максимальное значение сетевого адреса, если он задается в виде целого числа.</summary>
        [Newtonsoft.Json.JsonProperty("networkAddressRangeMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NetworkAddressRangeMax { get; set; }
    
        /// <summary>Возможности интерфейса обмена данными.</summary>
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DataInterfaceFeatures Features { get; set; }
    
        /// <summary>Интерфейс драйвера, если поддерживается.</summary>
        [Newtonsoft.Json.JsonProperty("driver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EquipmentDriverInterface Driver { get; set; }
    
        /// <summary>Список поддерживаемых биты четности обмена через COM-порт.</summary>
        [Newtonsoft.Json.JsonProperty("supportedParity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Parity SupportedParity { get; set; }
    
        /// <summary>Список поддерживаемых стоп-битов при обмене через COM-порт.</summary>
        [Newtonsoft.Json.JsonProperty("supportedStopBits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StopBits SupportedStopBits { get; set; }
    
        /// <summary>Список поддерживаемых бит данных при обмене через COM-порт.</summary>
        [Newtonsoft.Json.JsonProperty("supportedDataBits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DataBits SupportedDataBits { get; set; }
    
    
    }
    
    /// <summary>Вариант исполнения модели оборудования.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EquipmentModelModification 
    {
        /// <summary>Уникальный идентификатор варианта исполнения.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Идентификатор модели, к которой относится вариант исполнения.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentModelId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EquipmentModelId { get; set; }
    
        /// <summary>Признак системной модели оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("isSystem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSystem { get; set; }
    
        /// <summary>Комментарий.</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        /// <summary>Класс точности.</summary>
        [Newtonsoft.Json.JsonProperty("precisionClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrecisionClass { get; set; }
    
        /// <summary>Диаметр условного прохода (ДУ).</summary>
        [Newtonsoft.Json.JsonProperty("nominalDiameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NominalDiameter { get; set; }
    
        /// <summary>Относительная погрешность, %.</summary>
        [Newtonsoft.Json.JsonProperty("relativeError", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float RelativeError { get; set; }
    
        /// <summary>Нижняя граница пределов измерения температурного датчика.</summary>
        [Newtonsoft.Json.JsonProperty("tempSensorMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float TempSensorMin { get; set; }
    
        /// <summary>Верхняя граница пределов измерения температурного датчика.</summary>
        [Newtonsoft.Json.JsonProperty("tempSensorMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float TempSensorMax { get; set; }
    
        /// <summary>Нижняя граница пределов измерения датчика давления.</summary>
        [Newtonsoft.Json.JsonProperty("pressSensorMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float PressSensorMin { get; set; }
    
        /// <summary>Верхняя граница пределов измерения датчика давления.</summary>
        [Newtonsoft.Json.JsonProperty("pressSensorMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float PressSensorMax { get; set; }
    
        /// <summary>Нижняя граница пределов измерения расходомера.</summary>
        [Newtonsoft.Json.JsonProperty("flowSensorMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float FlowSensorMin { get; set; }
    
        /// <summary>Верхняя граница пределов измерения расходомера.</summary>
        [Newtonsoft.Json.JsonProperty("flowSensorMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float FlowSensorMax { get; set; }
    
        /// <summary>Длина измерительной части</summary>
        [Newtonsoft.Json.JsonProperty("measureLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float MeasureLength { get; set; }
    
        /// <summary>Номинальная статическая характеристика</summary>
        [Newtonsoft.Json.JsonProperty("nominalStaticCharacteristic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NominalStaticCharacteristic { get; set; }
    
    
    }
    
    /// <summary>Описание настроек порта коммуникационного контроллера.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EquipmentModelPortSettings 
    {
        /// <summary>Уникальный идентификатор.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Наименование.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
    
    }
    
    /// <summary>Описание порта коммуникационного контроллера.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EquipmentModelPort 
    {
        /// <summary>Уникальный идентификатор.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Наименование.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>Список настроек порта.</summary>
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EquipmentModelPortSettings> Settings { get; set; }
    
    
    }
    
    /// <summary>Модель оборудования.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EquipmentModel 
    {
        /// <summary>Уникальный идентификатор записи.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Признак системной модели оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("isSystem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSystem { get; set; }
    
        /// <summary>Наименование модели оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }
    
        /// <summary>Полное наименование.</summary>
        [Newtonsoft.Json.JsonProperty("longTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongTitle { get; set; }
    
        /// <summary>Комментарий.</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        /// <summary>Характеристики оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("capabilities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EquipmentCapabilities Capabilities { get; set; }
    
        /// <summary>Формат серийного номера.</summary>
        [Newtonsoft.Json.JsonProperty("serialNumberFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumberFormat { get; set; }
    
        /// <summary>Комментарий</summary>
        [Newtonsoft.Json.JsonProperty("serialNumberComment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumberComment { get; set; }
    
        /// <summary>Номер в государственном реестре средств измерений.</summary>
        [Newtonsoft.Json.JsonProperty("stateRegisterNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateRegisterNumber { get; set; }
    
        /// <summary>Межповерочный интервал.</summary>
        [Newtonsoft.Json.JsonProperty("calibrationInterval", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CalibrationInterval { get; set; }
    
        /// <summary>Датчик температуры.</summary>
        [Newtonsoft.Json.JsonProperty("isTemperatureSensor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsTemperatureSensor { get; set; }
    
        /// <summary>Датчик давления.</summary>
        [Newtonsoft.Json.JsonProperty("isPressureSensor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPressureSensor { get; set; }
    
        /// <summary>Расходомер.</summary>
        [Newtonsoft.Json.JsonProperty("isFlowSensor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsFlowSensor { get; set; }
    
        /// <summary>Электросчётчик.</summary>
        [Newtonsoft.Json.JsonProperty("isElectricMeter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsElectricMeter { get; set; }
    
        /// <summary>Поддерживаемые типы инженерной системы.</summary>
        [Newtonsoft.Json.JsonProperty("supportedSystemTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SystemType SupportedSystemTypes { get; set; }
    
        /// <summary>Поддерживаемые каналы связи.</summary>
        [Newtonsoft.Json.JsonProperty("supportedCommLinks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommunicationLink SupportedCommLinks { get; set; }
    
        /// <summary>Поддерживаемые типы вызовов.</summary>
        [Newtonsoft.Json.JsonProperty("supportedCallTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GsmCallType SupportedCallTypes { get; set; }
    
        /// <summary>Возможности модема.</summary>
        [Newtonsoft.Json.JsonProperty("modemFeatures", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ControllerFeatures ModemFeatures { get; set; }
    
        /// <summary>Количество сухих контактов для сигнализации.</summary>
        [Newtonsoft.Json.JsonProperty("dryContactCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DryContactCount { get; set; }
    
        /// <summary>Описание модели устройства (счетчика с цифровым интерфейсом).</summary>
        [Newtonsoft.Json.JsonProperty("dataInterface", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EquipmentDataInterface DataInterface { get; set; }
    
        /// <summary>Список вариантов исполнения.</summary>
        [Newtonsoft.Json.JsonProperty("modifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EquipmentModelModification> Modifications { get; set; }
    
        /// <summary>Список портов для коммуникационного оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("ports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EquipmentModelPort> Ports { get; set; }
    
    
    }
    
    /// <summary>Модель, хранящая свойства подключения для опроса оборудования.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PollConnection 
    {
        /// <summary>Идентификатор подключения.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Тип канала связи.</summary>
        [Newtonsoft.Json.JsonProperty("commLinkType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommunicationLink CommLinkType { get; set; }
    
        /// <summary>Номер телефона.</summary>
        [Newtonsoft.Json.JsonProperty("dialNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DialNumber { get; set; }
    
        /// <summary>Таймаут соединения (в сек.).</summary>
        [Newtonsoft.Json.JsonProperty("connectionTimeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ConnectionTimeout { get; set; }
    
        /// <summary>Имитация модема при прямом подключении.</summary>
        [Newtonsoft.Json.JsonProperty("imitateModem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ImitateModem { get; set; }
    
        /// <summary>Скорость порта.</summary>
        [Newtonsoft.Json.JsonProperty("portSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PortSpeed { get; set; }
    
        /// <summary>Контроль потока.</summary>
        [Newtonsoft.Json.JsonProperty("flowControl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FlowControl FlowControl { get; set; }
    
        /// <summary>Протокол обмена.</summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Protocol { get; set; }
    
        /// <summary>Тип вызова GPRS-устройства.</summary>
        [Newtonsoft.Json.JsonProperty("gprsCallType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GsmCallType GprsCallType { get; set; }
    
        /// <summary>Автоматический разрыв соединения после опроса.</summary>
        [Newtonsoft.Json.JsonProperty("gprsAutoDisconnect", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool GprsAutoDisconnect { get; set; }
    
        /// <summary>Идентификатор коммуникационного оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("commDeviceEquipmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CommDeviceEquipmentId { get; set; }
    
        /// <summary>Коммуникационное оборудование.</summary>
        [Newtonsoft.Json.JsonProperty("commDevice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Equipment CommDevice { get; set; }
    
        /// <summary>Модель коммуникационного оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("commDeviceModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EquipmentModel CommDeviceModel { get; set; }
    
        /// <summary>Порт контроллера.</summary>
        [Newtonsoft.Json.JsonProperty("commDevicePortId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CommDevicePortId { get; set; }
    
        /// <summary>Параметры порта контроллера.</summary>
        [Newtonsoft.Json.JsonProperty("commDevicePortSettingsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CommDevicePortSettingsId { get; set; }
    
        /// <summary>Идентификатор порта опроса.</summary>
        [Newtonsoft.Json.JsonProperty("pollPortId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PollPortId { get; set; }
    
        /// <summary>Идентификатор группы портов опроса.</summary>
        [Newtonsoft.Json.JsonProperty("pollPortGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PollPortGroupId { get; set; }
    
        /// <summary>Наименование группы портов опроса.</summary>
        [Newtonsoft.Json.JsonProperty("pollPortGroupTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PollPortGroupTitle { get; set; }
    
        /// <summary>Возвращает признак того, что подключение принадлежит сети устройств (только для чтения).</summary>
        [Newtonsoft.Json.JsonProperty("isNetwork", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsNetwork { get; set; }
    
        /// <summary>Наименование подключения.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>Хост для Интернет-подключения.</summary>
        [Newtonsoft.Json.JsonProperty("internetHost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternetHost { get; set; }
    
        /// <summary>Номер TCP-порта для Интернет-подключения.</summary>
        [Newtonsoft.Json.JsonProperty("internetPort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InternetPort { get; set; }
    
        /// <summary>Оборудование, связанное с подключением.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> EquipmentIdList { get; set; }
    
        /// <summary>Бит чётности.</summary>
        [Newtonsoft.Json.JsonProperty("parity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Parity Parity { get; set; }
    
        /// <summary>Стоп-бит.</summary>
        [Newtonsoft.Json.JsonProperty("stopBits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StopBits StopBits { get; set; }
    
        /// <summary>Бит данных.</summary>
        [Newtonsoft.Json.JsonProperty("dataBits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DataBits DataBits { get; set; }
    
    
    }
    
    /// <summary>Параметры опроса оборудования.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EquipmentPollSettings 
    {
        /// <summary>Задержка ответа (мс).</summary>
        [Newtonsoft.Json.JsonProperty("responseDelay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ResponseDelay { get; set; }
    
        /// <summary>Идентификатор протокола.</summary>
        [Newtonsoft.Json.JsonProperty("protocolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProtocolId { get; set; }
    
        /// <summary>Идентификатор адаптера.</summary>
        [Newtonsoft.Json.JsonProperty("adapterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AdapterId { get; set; }
    
        /// <summary>Адрес адаптера.</summary>
        [Newtonsoft.Json.JsonProperty("adapterAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AdapterAddress { get; set; }
    
        /// <summary>Подключения.</summary>
        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PollConnection> Connections { get; set; }
    
    
    }
    
    /// <summary>Параметры коммуникационного оборудования.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EquipmentModem 
    {
        /// <summary>Идентификатор модема.</summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        /// <summary>Порт опроса для GPRS-модемов без идентификации.</summary>
        [Newtonsoft.Json.JsonProperty("pollPortId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PollPortId { get; set; }
    
        /// <summary>IMEI сим карты в модеме.</summary>
        [Newtonsoft.Json.JsonProperty("imei", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Imei { get; set; }
    
        /// <summary>Признак того, что коммуникационное оборудование сейчас на связи.</summary>
        [Newtonsoft.Json.JsonProperty("isOnline", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsOnline { get; set; }
    
        /// <summary>Указывает что модему требуется отправлять пакеты "KeepAlive".</summary>
        [Newtonsoft.Json.JsonProperty("enableKeepAlive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableKeepAlive { get; set; }
    
    
    }
    
    /// <summary>Считанные с устройства параметры оборудования.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EquipmentReadParameters 
    {
        /// <summary>Версия аппаратного исполнения.</summary>
        [Newtonsoft.Json.JsonProperty("hardwareVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HardwareVersion { get; set; }
    
        /// <summary>Версия программного обеспечения (прошивки).</summary>
        [Newtonsoft.Json.JsonProperty("firmwareVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirmwareVersion { get; set; }
    
        /// <summary>Разница во времени с системой на момент последнего опроса.</summary>
        [Newtonsoft.Json.JsonProperty("timeDifference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TimeDifference { get; set; }
    
        /// <summary>Уровень заряда батареи (в вольтах).</summary>
        [Newtonsoft.Json.JsonProperty("batteryLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? BatteryLevel { get; set; }
    
        /// <summary>Состояние реле нагрузки электросчётчика.</summary>
        [Newtonsoft.Json.JsonProperty("electricLoadState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ElectricLoadState { get; set; }
    
        /// <summary>Дата и время последней коррекции часов устройства.</summary>
        [Newtonsoft.Json.JsonProperty("lastClockCorrectionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastClockCorrectionDate { get; set; }
    
    
    }
    
    /// <summary>Экземпляр оборудования.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Equipment 
    {
        /// <summary>Идентификатор оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Идентификатор модели оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentModelId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EquipmentModelId { get; set; }
    
        /// <summary>Серийный номер оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        /// <summary>Номер пломбы госповерителя.</summary>
        [Newtonsoft.Json.JsonProperty("sealNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SealNumber { get; set; }
    
        /// <summary>Последняя дата поверки</summary>
        [Newtonsoft.Json.JsonProperty("lastCalibrationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastCalibrationDate { get; set; }
    
        /// <summary>Дата планируемой поверки.</summary>
        [Newtonsoft.Json.JsonProperty("scheduledCalibrationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ScheduledCalibrationDate { get; set; }
    
        /// <summary>Вариант исполнения оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentModificationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EquipmentModificationId { get; set; }
    
        /// <summary>Пароль.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }
    
        /// <summary>Пароль второго уровня.</summary>
        [Newtonsoft.Json.JsonProperty("secondLevelPassword", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecondLevelPassword { get; set; }
    
        /// <summary>Комментарий.</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        /// <summary>Сетевой адрес.</summary>
        [Newtonsoft.Json.JsonProperty("networkAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NetworkAddress { get; set; }
    
        /// <summary>Параметры опроса для оборудования с цифровым интерфейсом.</summary>
        [Newtonsoft.Json.JsonProperty("pollSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EquipmentPollSettings PollSettings { get; set; }
    
        /// <summary>Параметры коммуникационного оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("modem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EquipmentModem Modem { get; set; }
    
        /// <summary>Последние считанные с устройства параметры.</summary>
        [Newtonsoft.Json.JsonProperty("lastReadParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EquipmentReadParameters LastReadParameters { get; set; }
    
        /// <summary>Указывает что оборудование может быть установлено на нескольких объектах учёта.</summary>
        [Newtonsoft.Json.JsonProperty("isShared", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsShared { get; set; }
    
        /// <summary>Подразделение, в который входит оборудование.</summary>
        [Newtonsoft.Json.JsonProperty("divisionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DivisionId { get; set; }
    
    
    }
    
    /// <summary>Состояние объекта учета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum NodeState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 3,
    
    }
    
    /// <summary>Тип объекта учета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum NodeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"House")]
        House = 2,
    
    }
    
    /// <summary>Представляет географические координаты.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GeoLocation 
    {
        /// <summary>Широта.</summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Latitude { get; set; }
    
        /// <summary>Долгота.</summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Longitude { get; set; }
    
    
    }
    
    /// <summary>Нормативы на потребление для жилого дома.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HouseNorms 
    {
        /// <summary>Норматив на потребление холодной воды на человека в месяц (м3)</summary>
        [Newtonsoft.Json.JsonProperty("coldWater", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float ColdWater { get; set; }
    
        /// <summary>Норматив на потребление горячей воды на человека в месяц (м3)</summary>
        [Newtonsoft.Json.JsonProperty("hotWater", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float HotWater { get; set; }
    
        /// <summary>Норматив потребления тепла на квадратный метр в месяц (ГКал).</summary>
        [Newtonsoft.Json.JsonProperty("heat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Heat { get; set; }
    
        /// <summary>Норматив потребления электроэнергии на человека в месяц (кВт*ч).</summary>
        [Newtonsoft.Json.JsonProperty("electricity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Electricity { get; set; }
    
        /// <summary>Норматив потребления газа на человека в месяц (м3).</summary>
        [Newtonsoft.Json.JsonProperty("gas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Gas { get; set; }
    
    
    }
    
    /// <summary>Экземпляр атрибута заданного для объекта учета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NodeCustomAttribute 
    {
        /// <summary>Идентификатор атрибута.</summary>
        [Newtonsoft.Json.JsonProperty("customAttributeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CustomAttributeId { get; set; }
    
        /// <summary>ID объекта учета.</summary>
        [Newtonsoft.Json.JsonProperty("nodeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NodeId { get; set; }
    
        /// <summary>Код атрибута.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Значение атрибута.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
    
    }
    
    /// <summary>Описывает объект системы "Объект учета".</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Node 
    {
        /// <summary>Идентификатор объекта учета.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Подразделение, в которое входит объект учёта.</summary>
        [Newtonsoft.Json.JsonProperty("divisionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DivisionId { get; set; }
    
        /// <summary>Наименование объекта учета.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }
    
        /// <summary>Номер объекта учета.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Number { get; set; }
    
        /// <summary>Адрес объекта учета.</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        /// <summary>Комментарий.</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        /// <summary>Идентификатор потребителя.</summary>
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomerId { get; set; }
    
        /// <summary>Ответственное лицо.</summary>
        [Newtonsoft.Json.JsonProperty("responsibleName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsibleName { get; set; }
    
        /// <summary>Телефон ответственного лица.</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePhone { get; set; }
    
        /// <summary>Идентификатор обслуживающего инженера.</summary>
        [Newtonsoft.Json.JsonProperty("servicemanId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServicemanId { get; set; }
    
        /// <summary>Идентификатор обслуживающей организации.</summary>
        [Newtonsoft.Json.JsonProperty("serviceCompanyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceCompanyId { get; set; }
    
        /// <summary>Состояние объекта.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NodeState State { get; set; }
    
        /// <summary>Идентификатор территории, на которой находится объект учёта</summary>
        [Newtonsoft.Json.JsonProperty("territoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TerritoryId { get; set; }
    
        /// <summary>Тип объекта учета.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NodeType Type { get; set; }
    
        /// <summary>Признак включения поквартирного опроса.</summary>
        [Newtonsoft.Json.JsonProperty("isCommunalPollEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsCommunalPollEnabled { get; set; }
    
        /// <summary>Температура холодной воды.</summary>
        [Newtonsoft.Json.JsonProperty("coldWaterSummerTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float ColdWaterSummerTemp { get; set; }
    
        /// <summary>Температура холодной воды.</summary>
        [Newtonsoft.Json.JsonProperty("coldWaterWinterTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float ColdWaterWinterTemp { get; set; }
    
        /// <summary>Количество используемых в объекте учета лицензий.</summary>
        [Newtonsoft.Json.JsonProperty("licenseCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 254)]
        public int LicenseCount { get; set; }
    
        /// <summary>Определяет, включен ли отопительный сезон на этом объекте учета.</summary>
        [Newtonsoft.Json.JsonProperty("isHeatingSeason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsHeatingSeason { get; set; }
    
        /// <summary>Географические координаты.</summary>
        [Newtonsoft.Json.JsonProperty("geoLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation GeoLocation { get; set; }
    
        /// <summary>Нормативы потребления для жилого дома.</summary>
        [Newtonsoft.Json.JsonProperty("norms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HouseNorms Norms { get; set; }
    
        /// <summary>Пользовательские атрибуты объекта учета.</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NodeCustomAttribute> Attributes { get; set; }
    
    
    }
    
    /// <summary>Связь оборудования с объектами учета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NodeEquipment 
    {
        /// <summary>Идентификатор объекта учета.</summary>
        [Newtonsoft.Json.JsonProperty("nodeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NodeId { get; set; }
    
        /// <summary>Идентификатор оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EquipmentId { get; set; }
    
    
    }
    
    /// <summary>Параметры ответа на запрос на получение списка оборудования (GetEquipmentList).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetEquipmentListResponseParameters 
    {
        /// <summary>Список оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("list", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Equipment> List { get; set; }
    
        /// <summary>Список всех моделей оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("modelList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EquipmentModel> ModelList { get; set; }
    
        /// <summary>Список объектов учета.</summary>
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Node> Nodes { get; set; }
    
        /// <summary>Связь оборудования с объектами учета.</summary>
        [Newtonsoft.Json.JsonProperty("nodeEquipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NodeEquipment> NodeEquipment { get; set; }
    
    
    }
    
    /// <summary>Связь точки учета с устройством.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DeviceChannelObject 
    {
        /// <summary>Идентификатор оборудования, к которому привязан канал.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EquipmentId { get; set; }
    
        /// <summary>Номер теплового ввода. 0 - тепловой ввод не используется.</summary>
        [Newtonsoft.Json.JsonProperty("heatLeadIn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HeatLeadIn { get; set; }
    
        /// <summary>Номер канала устройства.</summary>
        [Newtonsoft.Json.JsonProperty("channelNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ChannelNumber { get; set; }
    
        /// <summary>Подающая магистраль или обратная.</summary>
        [Newtonsoft.Json.JsonProperty("isSupply", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSupply { get; set; }
    
        /// <summary>Идентификатор точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointId { get; set; }
    
        /// <summary>Наименование точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MeasurePointTitle { get; set; }
    
    
    }
    
    /// <summary>Параметр данных точки учета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DataParameter
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"T_in")]
        T_in = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"T_out")]
        T_out = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"T_cw")]
        T_cw = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"T_outdoor")]
        T_outdoor = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"M_in")]
        M_in = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"M_out")]
        M_out = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"V_in")]
        V_in = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"V_out")]
        V_out = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Q_in")]
        Q_in = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Q_out")]
        Q_out = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Q_delta")]
        Q_delta = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P_in")]
        P_in = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P_out")]
        P_out = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P_cw")]
        P_cw = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NormalOperationDuration")]
        NormalOperationDuration = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"T")]
        T = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P")]
        P = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"V")]
        V = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"V_std")]
        V_std = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ap1")]
        Ap1 = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"An1")]
        An1 = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rp1")]
        Rp1 = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rn1")]
        Rn1 = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ap2")]
        Ap2 = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"An2")]
        An2 = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rp2")]
        Rp2 = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rn2")]
        Rn2 = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ap3")]
        Ap3 = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"An3")]
        An3 = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rp3")]
        Rp3 = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rn3")]
        Rn3 = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ap4")]
        Ap4 = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"An4")]
        An4 = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rp4")]
        Rp4 = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rn4")]
        Rn4 = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ap")]
        Ap = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"An")]
        An = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rp")]
        Rp = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rn")]
        Rn = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"StopDuration")]
        StopDuration = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FlowUnderrunDuration")]
        FlowUnderrunDuration = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FlowOverrunDuration")]
        FlowOverrunDuration = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TempDiffLowDuration")]
        TempDiffLowDuration = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NoPowerDuration")]
        NoPowerDuration = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IncidentDuration")]
        IncidentDuration = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SaturatedSteamDuration")]
        SaturatedSteamDuration = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"T_delta")]
        T_delta = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P_delta")]
        P_delta = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"V_delta")]
        V_delta = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"M_delta")]
        M_delta = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"M")]
        M = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"T_indoor")]
        T_indoor = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PowerProfile_Pp")]
        PowerProfile_Pp = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PowerProfile_Pn")]
        PowerProfile_Pn = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PowerProfile_Qp")]
        PowerProfile_Qp = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PowerProfile_Qn")]
        PowerProfile_Qn = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SA")]
        SA = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SB")]
        SB = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElectricCurrent_P")]
        ElectricCurrent_P = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pp")]
        Pp = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pn")]
        Pn = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PB")]
        PB = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PC")]
        PC = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Q")]
        Q = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Qp")]
        Qp = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Qn")]
        Qn = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QA")]
        QA = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QB")]
        QB = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QC")]
        QC = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"U")]
        U = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UA")]
        UA = 74,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UB")]
        UB = 75,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UC")]
        UC = 76,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 77,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IA")]
        IA = 78,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IB")]
        IB = 79,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IC")]
        IC = 80,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PhiUAB")]
        PhiUAB = 81,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PhiUAC")]
        PhiUAC = 82,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PhiUBC")]
        PhiUBC = 83,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PhiUIA")]
        PhiUIA = 84,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PhiUIB")]
        PhiUIB = 85,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PhiUIC")]
        PhiUIC = 86,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Frequency")]
        Frequency = 87,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CosPhi")]
        CosPhi = 88,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CosPhiA")]
        CosPhiA = 89,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CosPhiB")]
        CosPhiB = 90,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CosPhiC")]
        CosPhiC = 91,
    
        [System.Runtime.Serialization.EnumMember(Value = @"M_balance")]
        M_balance = 92,
    
        [System.Runtime.Serialization.EnumMember(Value = @"H")]
        H = 93,
    
        [System.Runtime.Serialization.EnumMember(Value = @"T_internal")]
        T_internal = 94,
    
        [System.Runtime.Serialization.EnumMember(Value = @"T_control")]
        T_control = 95,
    
        [System.Runtime.Serialization.EnumMember(Value = @"T_base")]
        T_base = 96,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValvePercent")]
        ValvePercent = 97,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CorrectionCoeff")]
        CorrectionCoeff = 98,
    
    }
    
    /// <summary>Привязка ячейки устройства к измеряемому параметру.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DeviceCellObject 
    {
        /// <summary>Идентификатор точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointId { get; set; }
    
        /// <summary>Измеряемый параметр.</summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DataParameter Parameter { get; set; }
    
        /// <summary>Тип данных в ячейке.</summary>
        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceDataType DataType { get; set; }
    
        /// <summary>Идентификатор ячейки.</summary>
        [Newtonsoft.Json.JsonProperty("cellId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CellId { get; set; }
    
        /// <summary>Вес импульса.</summary>
        [Newtonsoft.Json.JsonProperty("pulseRatio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float PulseRatio { get; set; }
    
        /// <summary>Идентификатор единицы измерения.</summary>
        [Newtonsoft.Json.JsonProperty("unitId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UnitId { get; set; }
    
        /// <summary>Идентификатор оборудования, к которому привязана ячейка.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EquipmentId { get; set; }
    
        /// <summary>Название ячейки.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Код драйвера ячейки.</summary>
        [Newtonsoft.Json.JsonProperty("driverCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DriverCode { get; set; }
    
    
    }
    
    /// <summary>Единицы измерения.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Unit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TechnicalAt")]
        TechnicalAt = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CelsiusDegree")]
        CelsiusDegree = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ton")]
        Ton = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CubicMeter")]
        CubicMeter = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GigaCalorie")]
        GigaCalorie = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kilowatt")]
        Kilowatt = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hour")]
        Hour = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KilowattHour")]
        KilowattHour = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GigaJoule")]
        GigaJoule = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MegaPascal")]
        MegaPascal = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pulse")]
        Pulse = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kilogram")]
        Kilogram = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Watt")]
        Watt = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KiloPascal")]
        KiloPascal = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KilowattHourHeat")]
        KilowattHourHeat = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MegawattHour")]
        MegawattHour = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KilogramSquareMeter")]
        KilogramSquareMeter = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Litre")]
        Litre = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bar")]
        Bar = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TeraJoule")]
        TeraJoule = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kiloton")]
        Kiloton = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KilovarHour")]
        KilovarHour = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WattHour")]
        WattHour = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VarHour")]
        VarHour = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MegaJoule")]
        MegaJoule = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MegawattHourHeat")]
        MegawattHourHeat = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WattHourHeat")]
        WattHourHeat = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Joule")]
        Joule = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WattHeat")]
        WattHeat = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KilowattHeat")]
        KilowattHeat = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Var")]
        Var = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kilovar")]
        Kilovar = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MegaCalorie")]
        MegaCalorie = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KiloCalorie")]
        KiloCalorie = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KiloJoule")]
        KiloJoule = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kelvin")]
        Kelvin = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KiloVoltAmper")]
        KiloVoltAmper = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Minute")]
        Minute = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Second")]
        Second = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Volt")]
        Volt = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Amper")]
        Amper = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Degree")]
        Degree = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Herz")]
        Herz = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Meter")]
        Meter = 46,
    
    }
    
    /// <summary>Привязка адреса памяти устройства к измеряемому параметру.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DeviceAddressObject 
    {
        /// <summary>Идентификатор точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointId { get; set; }
    
        /// <summary>Тип данных.</summary>
        [Newtonsoft.Json.JsonProperty("deviceDataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceDataType DeviceDataType { get; set; }
    
        /// <summary>Измеряемый параметр.</summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DataParameter Parameter { get; set; }
    
        /// <summary>Идентификатор оборудования, для которого привязан адрес.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EquipmentId { get; set; }
    
        /// <summary>Адрес памяти устройства.</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Address { get; set; }
    
        /// <summary>Единица измерения.</summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit Unit { get; set; }
    
        /// <summary>Глубина архива.
        /// Пока используется только для часовых и месячных привязок устройства ТЭКОН-19, во всех остальных случаях имеет значение 0.</summary>
        [Newtonsoft.Json.JsonProperty("archiveDepth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ArchiveDepth { get; set; }
    
        /// <summary>Множитель значения.</summary>
        [Newtonsoft.Json.JsonProperty("multiplier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Multiplier { get; set; }
    
        /// <summary>Модуль оборудования, для которого привязан адрес. 
        /// При выборке данных для опроса нужен ещё идентификатор модели оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentModelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EquipmentModelId { get; set; }
    
    
    }
    
    /// <summary>Тип точки учета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MeasurePointType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Regular")]
        Regular = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Communal")]
        Communal = 1,
    
    }
    
    /// <summary>Виды ресурса.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ResourceKind
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Water")]
        Water = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Electricity")]
        Electricity = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gas")]
        Gas = 3,
    
    }
    
    /// <summary>Состояние точки учета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MeasurePointState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 3,
    
    }
    
    /// <summary>Режим расчета недостающих записей с потреблением.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MissingConsumptionCalculationMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sum")]
        Sum = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ByTotals")]
        ByTotals = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ByPowerProfile")]
        ByPowerProfile = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AveragingCurrents")]
        AveragingCurrents = 4,
    
    }
    
    /// <summary>Режим осреднения значений.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ValueAveragingMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ArithmeticalMean")]
        ArithmeticalMean = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WeightedMean")]
        WeightedMean = 1,
    
    }
    
    /// <summary>Тип давления.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PressureType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gauge")]
        Gauge = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Absolute")]
        Absolute = 2,
    
    }
    
    /// <summary>Тип отображаемого давления по точке учёта.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MeasurePointDisplayPressureType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Measured")]
        Measured = 1,
    
    }
    
    /// <summary>Класс параметров расчета и хранения.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MeasurePointCalcAndStorageObject 
    {
        /// <summary>Определяет, включен ли расчет недостающих интеграторов по потреблению.</summary>
        [Newtonsoft.Json.JsonProperty("calculateMissingTotals", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CalculateMissingTotals { get; set; }
    
        /// <summary>Определяет, включен ли расчет недостающих интеграторов по текущим интеграторам.</summary>
        [Newtonsoft.Json.JsonProperty("calculateMissingTotalsEstimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CalculateMissingTotalsEstimate { get; set; }
    
        /// <summary>Определяет, включен ли расчет недостающего часового потребления.</summary>
        [Newtonsoft.Json.JsonProperty("calculateMissingHourConsumption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MissingConsumptionCalculationMode CalculateMissingHourConsumption { get; set; }
    
        /// <summary>Определяет режим расчета недостающего суточного потребления.</summary>
        [Newtonsoft.Json.JsonProperty("calculateMissingDayConsumption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MissingConsumptionCalculationMode CalculateMissingDayConsumption { get; set; }
    
        /// <summary>Определяет режим расчета недостающего месячного потребления.</summary>
        [Newtonsoft.Json.JsonProperty("calculateMissingMonthConsumption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MissingConsumptionCalculationMode CalculateMissingMonthConsumption { get; set; }
    
        /// <summary>Определяет, включен ли расчет недостающих значений во всех архивах.</summary>
        [Newtonsoft.Json.JsonProperty("calculateMissingValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CalculateMissingValues { get; set; }
    
        /// <summary>Определяет, включен ли расчет недостающих значений тепла.</summary>
        [Newtonsoft.Json.JsonProperty("calculateMissingHeatValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CalculateMissingHeatValues { get; set; }
    
        /// <summary>Режим осреднения значений при расчете (температур и давлений).</summary>
        [Newtonsoft.Json.JsonProperty("calculatedValuesAveragingMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ValueAveragingMode CalculatedValuesAveragingMode { get; set; }
    
        /// <summary>Тип давление в устройстве.</summary>
        [Newtonsoft.Json.JsonProperty("devicePressureType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PressureType DevicePressureType { get; set; }
    
        /// <summary>Использование расширенного алгоритма интерполяции интеграторов</summary>
        [Newtonsoft.Json.JsonProperty("useAdvancedTotalsInterpolation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseAdvancedTotalsInterpolation { get; set; }
    
        /// <summary>Тип давления, которое отображается в точке учёта.</summary>
        [Newtonsoft.Json.JsonProperty("displayPressureType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MeasurePointDisplayPressureType DisplayPressureType { get; set; }
    
    
    }
    
    /// <summary>Вариант группировки часовых записей по расчетному часу.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ReportingHourMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"StartOfDay")]
        StartOfDay = 1,
    
    }
    
    /// <summary>Экземпляр атрибута заданного для точки учета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MeasurePointCustomAttribute 
    {
        /// <summary>ID точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointId { get; set; }
    
        /// <summary>Код атрибута.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Значение атрибута.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
    
    }
    
    /// <summary>Описывает объект системы "Точка учета".</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MeasurePoint 
    {
        /// <summary>Уникальный идентификатор.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Наименование.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }
    
        /// <summary>Полное наименование, включающее наименование Объекта учета или Лицевого счета.</summary>
        [Newtonsoft.Json.JsonProperty("fullTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullTitle { get; set; }
    
        /// <summary>Наименование родительского Объекта учета или Лицевого счета.</summary>
        [Newtonsoft.Json.JsonProperty("parentTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentTitle { get; set; }
    
        /// <summary>Адрес Объекта учета либо Лицевого счета.</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        /// <summary>Тип точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MeasurePointType Type { get; set; }
    
        /// <summary>Порядковый номер в инженерной системе.</summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OrderNumber { get; set; }
    
        /// <summary>Тип системы.</summary>
        [Newtonsoft.Json.JsonProperty("systemType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SystemType SystemType { get; set; }
    
        /// <summary>Возвращает идентификатор объекта учета (для обычных точек) или идентификатор жилого дома (для квартирных точек).</summary>
        [Newtonsoft.Json.JsonProperty("nodeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NodeId { get; set; }
    
        /// <summary>Идентификатор Помещения. Имеет значение только для коммунальных точек учета.</summary>
        [Newtonsoft.Json.JsonProperty("roomId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RoomId { get; set; }
    
        /// <summary>Глобальный уникальный номер точки учета, используемый при импорте и экспорте данных между системами.</summary>
        [Newtonsoft.Json.JsonProperty("serviceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ServiceNumber { get; set; }
    
        /// <summary>Признак двухтрубной системы ГВС.</summary>
        [Newtonsoft.Json.JsonProperty("isDoublePipeHotWaterSystem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDoublePipeHotWaterSystem { get; set; }
    
        /// <summary>Определяет количество каналов точки учета, в зависимости от системы.</summary>
        [Newtonsoft.Json.JsonProperty("isTwoChannels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsTwoChannels { get; set; }
    
        /// <summary>Вид ресурса.</summary>
        [Newtonsoft.Json.JsonProperty("resourceKind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResourceKind ResourceKind { get; set; }
    
        /// <summary>Идентификатор устройства.</summary>
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeviceId { get; set; }
    
        /// <summary>Идентификатор счетчика.</summary>
        [Newtonsoft.Json.JsonProperty("counterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CounterId { get; set; }
    
        /// <summary>Тип канала связи.</summary>
        [Newtonsoft.Json.JsonProperty("commLinkType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommunicationLink CommLinkType { get; set; }
    
        /// <summary>Комментарий.</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        /// <summary>Список измеряемых параметров, отображаемых по умолчанию в таблицах и графиках.</summary>
        [Newtonsoft.Json.JsonProperty("selectedParamsList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<DataParameter> SelectedParamsList { get; set; }
    
        /// <summary>Часовое договорное значение тепловой энергии (ГКал/ч).</summary>
        [Newtonsoft.Json.JsonProperty("contractHeat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float ContractHeat { get; set; }
    
        /// <summary>Часовое договорное значение расхода (т/ч или м3/ч).</summary>
        [Newtonsoft.Json.JsonProperty("contractFlow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float ContractFlow { get; set; }
    
        /// <summary>Договорное давление в подающей магистрали (избыточное, кгс/см2).</summary>
        [Newtonsoft.Json.JsonProperty("contractPin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float ContractPin { get; set; }
    
        /// <summary>Договорное давление в отводящей магистрали (избыточное, кгс/см2).</summary>
        [Newtonsoft.Json.JsonProperty("contractPout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float ContractPout { get; set; }
    
        /// <summary>Договорная температура в подающей магистрали.</summary>
        [Newtonsoft.Json.JsonProperty("contractTin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float ContractTin { get; set; }
    
        /// <summary>Договорная температура в отводящей магистрали.</summary>
        [Newtonsoft.Json.JsonProperty("contractTout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float ContractTout { get; set; }
    
        /// <summary>Коэффициент трансформации по току (для точек учета с системой "Электроснабжение").</summary>
        [Newtonsoft.Json.JsonProperty("currentRatio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 40000D)]
        public float CurrentRatio { get; set; }
    
        /// <summary>Коэффициент трансформации по напряжению (для точек учета с системой "Электроснабжение").</summary>
        [Newtonsoft.Json.JsonProperty("voltageRatio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 11500D)]
        public float VoltageRatio { get; set; }
    
        /// <summary>Состояние точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MeasurePointState State { get; set; }
    
        /// <summary>Отображать рассчитанные данные.</summary>
        [Newtonsoft.Json.JsonProperty("showCalculatedData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShowCalculatedData { get; set; }
    
        /// <summary>Отображать недостоверные значения.</summary>
        [Newtonsoft.Json.JsonProperty("showBadValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShowBadValues { get; set; }
    
        /// <summary>Параметры расчета и хранения.</summary>
        [Newtonsoft.Json.JsonProperty("calcAndStorage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MeasurePointCalcAndStorageObject CalcAndStorage { get; set; }
    
        /// <summary>Расчетный час.</summary>
        [Newtonsoft.Json.JsonProperty("reportingHour", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ReportingHour { get; set; }
    
        /// <summary>Расчетные сутки.</summary>
        [Newtonsoft.Json.JsonProperty("reportingDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ReportingDay { get; set; }
    
        /// <summary>Вариант группировки часовых записей по расчетному часу.</summary>
        [Newtonsoft.Json.JsonProperty("reportingHourMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportingHourMode ReportingHourMode { get; set; }
    
        /// <summary>Реверсивный поток.</summary>
        [Newtonsoft.Json.JsonProperty("isReversibleFlow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsReversibleFlow { get; set; }
    
        /// <summary>Расчетная точка учета.</summary>
        [Newtonsoft.Json.JsonProperty("isVirtual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsVirtual { get; set; }
    
        /// <summary>Пользовательские атрибуты точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MeasurePointCustomAttribute> Attributes { get; set; }
    
        /// <summary>Устройство, используемое для опроса точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("device", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Equipment Device { get; set; }
    
        /// <summary>Модель оборудования устройства опроса.</summary>
        [Newtonsoft.Json.JsonProperty("deviceEquipmentModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EquipmentModel DeviceEquipmentModel { get; set; }
    
        /// <summary>Типы данных, по которым производится диагностика нештатных ситуаций по точке учёта.</summary>
        [Newtonsoft.Json.JsonProperty("diagDataTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceDataType? DiagDataTypes { get; set; }
    
        /// <summary>Дата, до которой точка учёта допущена в эксплуатацию.</summary>
        [Newtonsoft.Json.JsonProperty("admissionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AdmissionDate { get; set; }
    
        /// <summary>Идентификатор статуса обслуживания точки учёта.</summary>
        [Newtonsoft.Json.JsonProperty("servicingStatusId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int ServicingStatusId { get; set; }
    
        /// <summary>Список отображаемых в таблице и графиках единиц измерения.</summary>
        [Newtonsoft.Json.JsonProperty("measuredParameterUnitCollection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MeasuredParameterUnitCollection MeasuredParameterUnitCollection { get; set; }
    
    
    }
    
    /// <summary>Параметры ответа на запрос получения экземпляра оборудования.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetEquipmentResponseParameters 
    {
        /// <summary>Список оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("equipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Equipment Equipment { get; set; }
    
        /// <summary>Список всех моделей оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EquipmentModel Model { get; set; }
    
        /// <summary>Привязка каналов устройства.</summary>
        [Newtonsoft.Json.JsonProperty("channelBind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeviceChannelObject> ChannelBind { get; set; }
    
        /// <summary>Привязка ячеек.</summary>
        [Newtonsoft.Json.JsonProperty("cellBind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeviceCellObject> CellBind { get; set; }
    
        /// <summary>Привязка адресов памяти.</summary>
        [Newtonsoft.Json.JsonProperty("addressBind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeviceAddressObject> AddressBind { get; set; }
    
        /// <summary>Точки учета, связанные с этим устройством через привязку каналов, ячеек или адресов.</summary>
        [Newtonsoft.Json.JsonProperty("measurePoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MeasurePoint> MeasurePoints { get; set; }
    
        /// <summary>Объекты учета, на которых установлено это оборудование.</summary>
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Node> Nodes { get; set; }
    
    
    }
    
    /// <summary>Запрос аутентификации на сервере по логину и паролю.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AuthenticatePlainRequestParameters 
    {
        /// <summary>Имя входа.</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string Login { get; set; }
    
        /// <summary>Пароль.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }
    
        /// <summary>Название приложения, через которое клиент входит на сервер.</summary>
        [Newtonsoft.Json.JsonProperty("application", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Application { get; set; }
    
    
    }
    
    /// <summary>Ответ на запрос авторизации через WEB API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LoginResponseParameters 
    {
        /// <summary>Токен для выполнения запросов.</summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        /// <summary>Дата истечения токена.</summary>
        [Newtonsoft.Json.JsonProperty("tokenExpiration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset TokenExpiration { get; set; }
    
    
    }
    
    /// <summary>Запрос аутентификации на сервере.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AuthenticateRequestParameters 
    {
        /// <summary>Название приложения, через которое клиент входит на сервер.</summary>
        [Newtonsoft.Json.JsonProperty("application", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Application { get; set; }
    
    
    }
    
    /// <summary>Определяет режим проверки доступа к точке учета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MeasurePointCheckAccessMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SystemType")]
        SystemType = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Explicit")]
        Explicit = 1,
    
    }
    
    /// <summary>Стартовая страница, открываемая при входе в систему.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum StartPage
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NodeList")]
        NodeList = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MeasurePointList")]
        MeasurePointList = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Map")]
        Map = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TenantOffice")]
        TenantOffice = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SummaryCurrentsMonitor")]
        SummaryCurrentsMonitor = 5,
    
    }
    
    /// <summary>Диапазон IP-адресов, с которых разрешено/запрещено работать учетной записи.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AccountIpAddress 
    {
        /// <summary>Идентификатор учетной записи.</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AccountId { get; set; }
    
        /// <summary>Начальный Ip-адрес диапазона.</summary>
        [Newtonsoft.Json.JsonProperty("startIP", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartIP { get; set; }
    
        /// <summary>Конечный IP-адрес диапазона.</summary>
        [Newtonsoft.Json.JsonProperty("endIP", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndIP { get; set; }
    
    
    }
    
    /// <summary>Режим работы центра печати отчетов.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ReportPrintCenterMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ViewPrepared")]
        ViewPrepared = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CreateNew")]
        CreateNew = 1,
    
    }
    
    /// <summary>Режимы аутентификации, разрешённые для учётной записи.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum AccountAuthenticationMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Basic")]
        Basic = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 2,
    
    }
    
    /// <summary>Учетная запись</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Account 
    {
        /// <summary>Идентификатор учётной записи в системе безопасности.</summary>
        [Newtonsoft.Json.JsonProperty("trusteeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TrusteeId { get; set; }
    
        /// <summary>Имя входа учетной записи</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; }
    
        /// <summary>Флаг блокировки учетной записи</summary>
        [Newtonsoft.Json.JsonProperty("isDisabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDisabled { get; set; }
    
        /// <summary>Запретить смену пароля пользователем.</summary>
        [Newtonsoft.Json.JsonProperty("disablePasswordChange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DisablePasswordChange { get; set; }
    
        /// <summary>Признак того, что учетная запись входит в системную группу Администраторы.</summary>
        [Newtonsoft.Json.JsonProperty("isAdmin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAdmin { get; set; }
    
        /// <summary>Учетная запись имеет доступ ко всем объектам учета и жилым домам.</summary>
        [Newtonsoft.Json.JsonProperty("hasAllNodeAccess", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasAllNodeAccess { get; set; }
    
        /// <summary>Режим проверки доступа к точкам учета.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointCheckAccessMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MeasurePointCheckAccessMode MeasurePointCheckAccessMode { get; set; }
    
        /// <summary>Таймаут неактивности сеансов работы, открытых учетной записью</summary>
        [Newtonsoft.Json.JsonProperty("sessionTimeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SessionTimeout { get; set; }
    
        /// <summary>Максимальное количество одновременных сеансов работы под учетной записью.
        /// При превышении этого количество каждый новый сеанс автоматически закрывает самый старый сеанс.</summary>
        [Newtonsoft.Json.JsonProperty("maxSessionCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public int MaxSessionCount { get; set; }
    
        /// <summary>Номер мобильного телефона.</summary>
        [Newtonsoft.Json.JsonProperty("mobilePhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MobilePhone { get; set; }
    
        /// <summary>Адрес электронной почты.</summary>
        [Newtonsoft.Json.JsonProperty("eMail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EMail { get; set; }
    
        /// <summary>Шлюз e-mail для отправки SMS.</summary>
        [Newtonsoft.Json.JsonProperty("smsEMail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SmsEMail { get; set; }
    
        /// <summary>Отправлять SMS-сообщения через GSM-модем вместо e-mail шлюза.</summary>
        [Newtonsoft.Json.JsonProperty("sendSmsViaModem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SendSmsViaModem { get; set; }
    
        /// <summary>Начало временного интервала, в течение которого можно отправлять SMS-сообщения (в минутах).</summary>
        [Newtonsoft.Json.JsonProperty("notifyStartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NotifyStartTime { get; set; }
    
        /// <summary>Окончание временного интервала, в течение которого можно отправлять SMS-сообщения (в минутах).</summary>
        [Newtonsoft.Json.JsonProperty("notifyEndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NotifyEndTime { get; set; }
    
        /// <summary>Использовать интервал отправки SMS и для EMail тоже.</summary>
        [Newtonsoft.Json.JsonProperty("useSendIntervalForEmail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseSendIntervalForEmail { get; set; }
    
        /// <summary>Определяет, разрешены ли учетной записи все отчеты.</summary>
        [Newtonsoft.Json.JsonProperty("allowAllReports", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AllowAllReports { get; set; }
    
        /// <summary>Определяет, разрешены ли учетной записи все мнемосхемы.</summary>
        [Newtonsoft.Json.JsonProperty("allowAllDiagrams", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AllowAllDiagrams { get; set; }
    
        /// <summary>Список инженерных систем, разрешенных учетной записи.</summary>
        [Newtonsoft.Json.JsonProperty("allowedSystems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SystemType AllowedSystems { get; set; }
    
        /// <summary>Дата и время, по истечении которых заканчивается срок действия учетной записи</summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDate { get; set; }
    
        /// <summary>Режим использования списка IP-адресов, связанных с учетной записью.
        /// true - разрешен вход только с IP-адресов, указанных в списке;
        /// false - разрешен вход с любых IP-адресов, кроме указанных в списке;</summary>
        [Newtonsoft.Json.JsonProperty("ipAddressListMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IpAddressListMode { get; set; }
    
        /// <summary>Ограничить работу личным кабинетом жильца.</summary>
        [Newtonsoft.Json.JsonProperty("tenantOfficeOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool TenantOfficeOnly { get; set; }
    
        /// <summary>Стартовая страница, открываемая при входе в систему.</summary>
        [Newtonsoft.Json.JsonProperty("startPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StartPage StartPage { get; set; }
    
        /// <summary>Список диапазонов IP-адресов, с которых разрешено/запрещено работать учетной записи.</summary>
        [Newtonsoft.Json.JsonProperty("ipList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountIpAddress> IpList { get; set; }
    
        /// <summary>Дата и время установки пароля.</summary>
        [Newtonsoft.Json.JsonProperty("passwordSetDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset PasswordSetDate { get; set; }
    
        /// <summary>Дата и время установки блокировки.</summary>
        [Newtonsoft.Json.JsonProperty("disablingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DisablingDate { get; set; }
    
        /// <summary>Дата и время последнего входа учетной записи.</summary>
        [Newtonsoft.Json.JsonProperty("lastLoginDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastLoginDate { get; set; }
    
        /// <summary>Режим работы центра печати отчетов.</summary>
        [Newtonsoft.Json.JsonProperty("reportCenterFormMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportPrintCenterMode ReportCenterFormMode { get; set; }
    
        /// <summary>Разрешённые для учётной записи режимы аутентификации.</summary>
        [Newtonsoft.Json.JsonProperty("authenticationModes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountAuthenticationMode AuthenticationModes { get; set; }
    
        /// <summary>Идентификатор безопасности учётной записи Windows,
        /// которая сопоставлена с этой учётной записью ЛЭРС УЧЁТ.</summary>
        [Newtonsoft.Json.JsonProperty("windowsSid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WindowsSid { get; set; }
    
        /// <summary>Отмечает запрещён ли вход данной учётной записи.</summary>
        [Newtonsoft.Json.JsonProperty("loginNotAllowed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LoginNotAllowed { get; set; }
    
        /// <summary>Версия токена учётной записи.</summary>
        [Newtonsoft.Json.JsonProperty("tokenVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TokenVersion { get; set; }
    
        /// <summary>Идентификатор учетной записи.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Отображаемое имя учетной записи.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }
    
        /// <summary>Описание учетной записи.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Признак системной учетной записи.</summary>
        [Newtonsoft.Json.JsonProperty("isSystem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSystem { get; set; }
    
        /// <summary>Идентификатор домена учётной записи.</summary>
        [Newtonsoft.Json.JsonProperty("divisionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DivisionId { get; set; }
    
    
    }
    
    /// <summary>Права доступа, которыми может обладать учетная запись или группа учетных записей.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum AccessRight
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditNode")]
        EditNode = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditSystemParameters")]
        EditSystemParameters = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewData")]
        ViewData = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PrintReport")]
        PrintReport = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditSupplier")]
        EditSupplier = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewDeviceConfig")]
        ViewDeviceConfig = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TenantOffice")]
        TenantOffice = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditReport")]
        EditReport = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Activation")]
        Activation = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewDeviceEvents")]
        ViewDeviceEvents = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ManualInputCounterTotals")]
        ManualInputCounterTotals = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditOutdoorTemperature")]
        EditOutdoorTemperature = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditEquipmentModel")]
        EditEquipmentModel = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditRoom")]
        EditRoom = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContractAnalysis")]
        ContractAnalysis = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditReportGeneratingTask")]
        EditReportGeneratingTask = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TemperatureChart")]
        TemperatureChart = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HouseSummary")]
        HouseSummary = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DisconnectGprsController")]
        DisconnectGprsController = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HouseBalance")]
        HouseBalance = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditEquipment")]
        EditEquipment = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BrowseNonPublicNodeFile")]
        BrowseNonPublicNodeFile = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExportToXml80020")]
        ExportToXml80020 = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditPollPort")]
        EditPollPort = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditServiceman")]
        EditServiceman = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SaveData")]
        SaveData = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditInspector")]
        EditInspector = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditAnnouncement")]
        EditAnnouncement = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewGsmStatistics")]
        ViewGsmStatistics = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewControllersStatistics")]
        ViewControllersStatistics = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CallGprsController")]
        CallGprsController = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditBalanceGroup")]
        EditBalanceGroup = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditNodeJob")]
        EditNodeJob = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditAccount")]
        EditAccount = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ForceStopPoll")]
        ForceStopPoll = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewPreparedReport")]
        ViewPreparedReport = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PollCurrents")]
        PollCurrents = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditOwnNotificationSettings")]
        EditOwnNotificationSettings = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ControlMessageQueue")]
        ControlMessageQueue = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditTerritory")]
        EditTerritory = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditNodeJobResolution")]
        EditNodeJobResolution = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AllowAnyPollPort")]
        AllowAnyPollPort = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditMeasurePoint")]
        EditMeasurePoint = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CloseIncident")]
        CloseIncident = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeleteIncident")]
        DeleteIncident = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MoveMeasurePoint")]
        MoveMeasurePoint = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditNodeGroup")]
        EditNodeGroup = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditServiceCompany")]
        EditServiceCompany = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditCustomer")]
        EditCustomer = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditMap")]
        EditMap = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditPlugins")]
        EditPlugins = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditReportTemplate")]
        EditReportTemplate = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SendMessage")]
        SendMessage = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BackupDatabase")]
        BackupDatabase = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InstallSystemUpdate")]
        InstallSystemUpdate = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GetUserSessionList")]
        GetUserSessionList = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CloseUserSession")]
        CloseUserSession = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewSystemLog")]
        ViewSystemLog = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewAccountLog")]
        ViewAccountLog = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewUserSessionLog")]
        ViewUserSessionLog = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewMessageLog")]
        ViewMessageLog = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewLogFiles")]
        ViewLogFiles = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PollQueueControl")]
        PollQueueControl = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewPollSession")]
        ViewPollSession = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ManualPoll")]
        ManualPoll = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RemoteConsole")]
        RemoteConsole = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewIncident")]
        ViewIncident = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewMap")]
        ViewMap = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeletePreparedReport")]
        DeletePreparedReport = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditServicingStatuses")]
        EditServicingStatuses = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeleteNode")]
        DeleteNode = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeleteMeasurePoint")]
        DeleteMeasurePoint = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeleteRoom")]
        DeleteRoom = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeleteEquipment")]
        DeleteEquipment = 74,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewAccountNodeJob")]
        ViewAccountNodeJob = 75,
    
    }
    
    /// <summary>Группа учетных записей.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AccountGroup 
    {
        /// <summary>Идентификатор.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Идентификатор системы безопасности.</summary>
        [Newtonsoft.Json.JsonProperty("trusteeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TrusteeId { get; set; }
    
        /// <summary>Указывает что для группы учётных записей разрешены все мнемосхемы.</summary>
        [Newtonsoft.Json.JsonProperty("allowAllDiagrams", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AllowAllDiagrams { get; set; }
    
        /// <summary>Указывает что для группы учётных записей разрешены все отчёты.</summary>
        [Newtonsoft.Json.JsonProperty("allowAllReports", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AllowAllReports { get; set; }
    
        /// <summary>Наименование.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Title { get; set; }
    
        /// <summary>Признак того, что группа является системной.</summary>
        [Newtonsoft.Json.JsonProperty("isSystem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSystem { get; set; }
    
        /// <summary>Идентификатор подразделения, в которое входит учётная запись.</summary>
        [Newtonsoft.Json.JsonProperty("divisionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DivisionId { get; set; }
    
    
    }
    
    /// <summary>Информация о текущем вошедшем пользователе.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CurrentLoginInfo 
    {
        /// <summary>Параметры текущей учётной записи.</summary>
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Account Account { get; set; }
    
        /// <summary>Действующие разрешения для текущей учетной записи.</summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<AccessRight> Permissions { get; set; }
    
        /// <summary>Группы учетных записей, в которые входит текущая учетная запись.</summary>
        [Newtonsoft.Json.JsonProperty("accountGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountGroup> AccountGroups { get; set; }
    
    
    }
    
    /// <summary>Вид данных по электроэнергии.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ElectricDataKind
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Raw")]
        Raw = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Real")]
        Real = 1,
    
    }
    
    /// <summary>Типы единиц измерения в которых можно запросить данные по точке учёта.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MeasurePointDataUnitsRequestType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SystemUnits")]
        SystemUnits = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ConfiguredUnits")]
        ConfiguredUnits = 1,
    
    }
    
    /// <summary>Атрибуты записи с потреблением.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ConsumptionRecordAttributes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExternalData")]
        ExternalData = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IncompleteData")]
        IncompleteData = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CalculatedByDeviceTotals")]
        CalculatedByDeviceTotals = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MissingInDevice")]
        MissingInDevice = 4,
    
    }
    
    /// <summary>Значение параметра</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataParameterValue 
    {
        /// <summary>Параметр</summary>
        [Newtonsoft.Json.JsonProperty("dataParameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DataParameter DataParameter { get; set; }
    
        /// <summary>Значение</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }
    
        /// <summary>Флаг недостоверного значения</summary>
        [Newtonsoft.Json.JsonProperty("isBad", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsBad { get; set; }
    
        /// <summary>Флаг рассчитанного значения</summary>
        [Newtonsoft.Json.JsonProperty("isCalc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsCalc { get; set; }
    
        /// <summary>Флаг интерполированного значения</summary>
        [Newtonsoft.Json.JsonProperty("isInterpolated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsInterpolated { get; set; }
    
        /// <summary>Флаг сброшенного интегратора</summary>
        [Newtonsoft.Json.JsonProperty("isReset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsReset { get; set; }
    
    
    }
    
    /// <summary>Запись с данными о потреблении.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MeasurePointDataConsumptionRecord 
    {
        /// <summary>Дата и время.</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DateTime { get; set; }
    
        /// <summary>Список атрибутов записи.</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConsumptionRecordAttributes Attributes { get; set; }
    
        /// <summary>Тип ресурса к которому относится запись с данными.</summary>
        [Newtonsoft.Json.JsonProperty("resourceKind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResourceKind ResourceKind { get; set; }
    
        /// <summary>Возвращает значение, определяющее, является ли запись пустой (отсутствующей).</summary>
        [Newtonsoft.Json.JsonProperty("isEmpty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsEmpty { get; set; }
    
        /// <summary>Записи с данными о потреблении.</summary>
        [Newtonsoft.Json.JsonProperty("dataParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DataParameterValue> DataParameters { get; set; }
    
    
    }
    
    /// <summary>Категория параметра данных.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DataParameterCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Temperature")]
        Temperature = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pressure")]
        Pressure = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mass")]
        Mass = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Volume")]
        Volume = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Heat")]
        Heat = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Time")]
        Time = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ActiveElectricalEnergy")]
        ActiveElectricalEnergy = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ReactiveElectricalEnergy")]
        ReactiveElectricalEnergy = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ActiveElectricPower")]
        ActiveElectricPower = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ReactiveElectricPower")]
        ReactiveElectricPower = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ApparentElectricPower")]
        ApparentElectricPower = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Voltage")]
        Voltage = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElectricCurrent")]
        ElectricCurrent = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PhaseAngle")]
        PhaseAngle = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PowerFactor")]
        PowerFactor = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Frequency")]
        Frequency = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WaterLevel")]
        WaterLevel = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PressureDrop")]
        PressureDrop = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValvePercent")]
        ValvePercent = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Coefficient")]
        Coefficient = 20,
    
    }
    
    /// <summary>Единицы измерения</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataParametersUnitPair 
    {
        /// <summary>Категория параметра данных</summary>
        [Newtonsoft.Json.JsonProperty("dataParameterCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DataParameterCategory DataParameterCategory { get; set; }
    
        /// <summary>Единицы измерения</summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit Unit { get; set; }
    
    
    }
    
    /// <summary>Ответ на получение записей с потреблением</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetMeasurePointConsumptionResponse 
    {
        /// <summary>Тип давления</summary>
        [Newtonsoft.Json.JsonProperty("pressureType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PressureType PressureType { get; set; }
    
        /// <summary>Записи с месячным потреблением.</summary>
        [Newtonsoft.Json.JsonProperty("monthConsumption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MeasurePointDataConsumptionRecord> MonthConsumption { get; set; }
    
        /// <summary>Записи с суточным потреблением.</summary>
        [Newtonsoft.Json.JsonProperty("dayConsumption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MeasurePointDataConsumptionRecord> DayConsumption { get; set; }
    
        /// <summary>Записи с часовым потреблением.</summary>
        [Newtonsoft.Json.JsonProperty("hourConsumption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MeasurePointDataConsumptionRecord> HourConsumption { get; set; }
    
        /// <summary>Записи с текущим потреблением.</summary>
        [Newtonsoft.Json.JsonProperty("currentConsumption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MeasurePointDataConsumptionRecord> CurrentConsumption { get; set; }
    
        /// <summary>Единицы измерения для категории параметров.</summary>
        [Newtonsoft.Json.JsonProperty("dataParametersUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DataParametersUnitPair> DataParametersUnit { get; set; }
    
    
    }
    
    /// <summary>Параметры сохранения потребления.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SaveConsumptionParameters 
    {
        /// <summary>Тип данных потребления.</summary>
        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceDataType DataType { get; set; }
    
        /// <summary>Тип сохраняемого давления по воде.</summary>
        [Newtonsoft.Json.JsonProperty("pressureType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PressureType PressureType { get; set; }
    
        /// <summary>Потребление для сохранения.</summary>
        [Newtonsoft.Json.JsonProperty("consumption", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MeasurePointDataConsumptionRecord> Consumption { get; set; } = new System.Collections.ObjectModel.Collection<MeasurePointDataConsumptionRecord>();
    
    
    }
    
    /// <summary>Единица измерения для параметра.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UnitOfMeasurementObject 
    {
        /// <summary>Тип измеряемого параметра.</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DataParameterCategory Category { get; set; }
    
        /// <summary>Единица измерения.</summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit Unit { get; set; }
    
    
    }
    
    /// <summary>Параметры запроса сохранения потребления по точке учёта.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SaveConsumptionRequestParameters 
    {
        /// <summary>Данные потребления.</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SaveConsumptionParameters Data { get; set; } = new SaveConsumptionParameters();
    
        /// <summary>Единицы измерения, в которых передаются величины для сохранения (необязательный параметр).</summary>
        [Newtonsoft.Json.JsonProperty("unitsOfMeasurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UnitOfMeasurementObject> UnitsOfMeasurement { get; set; }
    
    
    }
    
    /// <summary>Параметры ответа на запрос списка точек учета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetMeasurePointListResponseParameters 
    {
        /// <summary>Список точек учета.</summary>
        [Newtonsoft.Json.JsonProperty("measurePoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MeasurePoint> MeasurePoints { get; set; }
    
        /// <summary>Список оборудования на точках учета.</summary>
        [Newtonsoft.Json.JsonProperty("equipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Equipment> Equipment { get; set; }
    
        /// <summary>Список моделей оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentModels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EquipmentModel> EquipmentModels { get; set; }
    
    
    }
    
    /// <summary>Типы нештатных ситуаций</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum IncidentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FlowGreaterThanMax")]
        FlowGreaterThanMax = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FlowLessThanMin")]
        FlowLessThanMin = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TempGreaterThanMax")]
        TempGreaterThanMax = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TempLessThanMin")]
        TempLessThanMin = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PressGreaterThanMax")]
        PressGreaterThanMax = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PressLessThanMin")]
        PressLessThanMin = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WaterLeak")]
        WaterLeak = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GasPressOutOfRange")]
        GasPressOutOfRange = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LimitConsumptionExceed")]
        LimitConsumptionExceed = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContractConsumptionExceed")]
        ContractConsumptionExceed = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BadDataReceived")]
        BadDataReceived = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GasFlowOverrun")]
        GasFlowOverrun = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GasFlowUnderrun")]
        GasFlowUnderrun = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WaterDischarge")]
        WaterDischarge = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InletTempOutOfContractRange")]
        InletTempOutOfContractRange = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ReturnOverheat")]
        ReturnOverheat = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GasTempOverrun")]
        GasTempOverrun = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GasTempUnderrun")]
        GasTempUnderrun = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GasPressOverrun")]
        GasPressOverrun = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GasPressUnderrun")]
        GasPressUnderrun = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GasTempOutOfRange")]
        GasTempOutOfRange = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NegativeMass")]
        NegativeMass = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NegativeMassConsumption")]
        NegativeMassConsumption = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MeasurePointMassImbalance")]
        MeasurePointMassImbalance = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SmallWorkTime")]
        SmallWorkTime = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TempDifferenceOutOfRange")]
        TempDifferenceOutOfRange = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InletMassOutOfRange")]
        InletMassOutOfRange = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OutletMassOutOfRange")]
        OutletMassOutOfRange = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InletTempOutOfRange")]
        InletTempOutOfRange = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OutletTempOutOfRange")]
        OutletTempOutOfRange = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InletPressOutOfRange")]
        InletPressOutOfRange = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OutletPressOutOfRange")]
        OutletPressOutOfRange = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HeatConsumptionOutOfRange")]
        HeatConsumptionOutOfRange = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NodeMassImbalance")]
        NodeMassImbalance = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DryContactStateChanged")]
        DryContactStateChanged = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LowBattery")]
        LowBattery = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HardwareErrors")]
        HardwareErrors = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InaccessibleDevice")]
        InaccessibleDevice = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InletVolumeOutOfRange")]
        InletVolumeOutOfRange = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OutletVolumeOutOfRange")]
        OutletVolumeOutOfRange = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FlowMeterMalfunction")]
        FlowMeterMalfunction = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeviceTimeDiffersTooMuch")]
        DeviceTimeDiffersTooMuch = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ConstantSubstitution")]
        ConstantSubstitution = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PressDifferenceOutOfRange")]
        PressDifferenceOutOfRange = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeviceDatabaseChanged")]
        DeviceDatabaseChanged = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MassDeltaOutOfRange")]
        MassDeltaOutOfRange = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VolumeDeltaOutOfRange")]
        VolumeDeltaOutOfRange = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GasVolumeOutOfRange")]
        GasVolumeOutOfRange = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GasStdVolumeOutOfRange")]
        GasStdVolumeOutOfRange = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElectricCurrentOutOfRange")]
        ElectricCurrentOutOfRange = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElectricCurrentAOutOfRange")]
        ElectricCurrentAOutOfRange = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElectricCurrentBOutOfRange")]
        ElectricCurrentBOutOfRange = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElectricCurrentCOutOfRange")]
        ElectricCurrentCOutOfRange = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElectricVoltageOutOfRange")]
        ElectricVoltageOutOfRange = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElectricVoltageAOutOfRange")]
        ElectricVoltageAOutOfRange = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElectricVoltageBOutOfRange")]
        ElectricVoltageBOutOfRange = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElectricVoltageCOutOfRange")]
        ElectricVoltageCOutOfRange = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CosPhiOutOfRange")]
        CosPhiOutOfRange = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CosPhiAOutOfRange")]
        CosPhiAOutOfRange = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CosPhiBOutOfRange")]
        CosPhiBOutOfRange = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CosPhiCOutOfRange")]
        CosPhiCOutOfRange = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FrequencyOutOfRange")]
        FrequencyOutOfRange = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ActivePowerOutOfRange")]
        ActivePowerOutOfRange = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ActivePowerOutOfRange_A")]
        ActivePowerOutOfRange_A = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ActivePowerOutOfRange_B")]
        ActivePowerOutOfRange_B = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ActivePowerOutOfRange_C")]
        ActivePowerOutOfRange_C = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ReactivePowerOutOfRange")]
        ReactivePowerOutOfRange = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ReactivePowerOutOfRange_A")]
        ReactivePowerOutOfRange_A = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ReactivePowerOutOfRange_B")]
        ReactivePowerOutOfRange_B = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ReactivePowerOutOfRange_C")]
        ReactivePowerOutOfRange_C = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayVolumeDeltaOutOfRange")]
        DayVolumeDeltaOutOfRange = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayActivePowerOutOfRange")]
        DayActivePowerOutOfRange = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayInletVolumeOutOfRange")]
        DayInletVolumeOutOfRange = 74,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayOutletVolumeOutOfRange")]
        DayOutletVolumeOutOfRange = 75,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GasPressDeltaOutOfRange")]
        GasPressDeltaOutOfRange = 76,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WaterTIndoorOutOfRange")]
        WaterTIndoorOutOfRange = 77,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayWorktimeOutOfRange")]
        DayWorktimeOutOfRange = 78,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayFlowMassOutOfRange")]
        DayFlowMassOutOfRange = 79,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayReturnMassOutOfRange")]
        DayReturnMassOutOfRange = 80,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayMassDeltaOutOfRange")]
        DayMassDeltaOutOfRange = 81,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayFlowTempOutOfRange")]
        DayFlowTempOutOfRange = 82,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayReturnTempOutOfRange")]
        DayReturnTempOutOfRange = 83,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayTempDeltaOutOfRange")]
        DayTempDeltaOutOfRange = 84,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayFlowHeatOutOfRange")]
        DayFlowHeatOutOfRange = 85,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayReturnHeatOutOfRange")]
        DayReturnHeatOutOfRange = 86,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayFlowPressOutOfRange")]
        DayFlowPressOutOfRange = 87,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayReturnPressOutOfRange")]
        DayReturnPressOutOfRange = 88,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayPressDeltaOutOfRange")]
        DayPressDeltaOutOfRange = 89,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayConsumptionOutOfAverage_Q")]
        DayConsumptionOutOfAverage_Q = 90,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayConsumptionOutOfAverage_M")]
        DayConsumptionOutOfAverage_M = 91,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayConsumptionOutOfAverage_V")]
        DayConsumptionOutOfAverage_V = 92,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayConsumptionOutOfAverage_Ap")]
        DayConsumptionOutOfAverage_Ap = 93,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayConsumptionOutOfAverage_Vin")]
        DayConsumptionOutOfAverage_Vin = 94,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayConsumptionOutOfAverage_Vout")]
        DayConsumptionOutOfAverage_Vout = 95,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayConsumptionOutOfAverage_Min")]
        DayConsumptionOutOfAverage_Min = 96,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayConsumptionOutOfAverage_Mout")]
        DayConsumptionOutOfAverage_Mout = 97,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InternalTempOutOfRange")]
        InternalTempOutOfRange = 98,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ReturnUnderheat")]
        ReturnUnderheat = 99,
    
    }
    
    /// <summary>Параметры диагностики нештатной ситуации.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DiagParam 
    {
        /// <summary>Тип нештатной ситуации.</summary>
        [Newtonsoft.Json.JsonProperty("incidentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IncidentType IncidentType { get; set; }
    
        /// <summary>Разрешена ли диагностика данного типа нештатных ситуаций.</summary>
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsEnabled { get; set; }
    
        /// <summary>Значение №1.</summary>
        [Newtonsoft.Json.JsonProperty("value1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Value1 { get; set; }
    
        /// <summary>Значение №2.</summary>
        [Newtonsoft.Json.JsonProperty("value2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Value2 { get; set; }
    
    
    }
    
    /// <summary>Состояние задания на опрос.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PollTaskState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ready")]
        Ready = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Executing")]
        Executing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stopping")]
        Stopping = 2,
    
    }
    
    /// <summary>Код завершения обработки задания</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum TaskCompletionCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Succeed")]
        Succeed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Expired")]
        Expired = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 2,
    
    }
    
    /// <summary>Тип задания на опрос.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PollTaskType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Auto")]
        Auto = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Forced")]
        Forced = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GprsControllerStarted")]
        GprsControllerStarted = 3,
    
    }
    
    /// <summary>Частота выполнения задания.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FrequencyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EveryDay")]
        EveryDay = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EveryWeek")]
        EveryWeek = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EveryMonth")]
        EveryMonth = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SpecificDays")]
        SpecificDays = 4,
    
    }
    
    /// <summary>Параметры расписания задания.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Schedule 
    {
        /// <summary>Флаг разрешенности выполнять задание.</summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; }
    
        /// <summary>Частота выполнения задания.</summary>
        [Newtonsoft.Json.JsonProperty("freqType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FrequencyType FreqType { get; set; }
    
        /// <summary>Дни, в которые выполняется задание.</summary>
        [Newtonsoft.Json.JsonProperty("freqInterval", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FreqInterval { get; set; }
    
        /// <summary>Время начала интервала времени, в течение которого разрешено выполнять задание (минут).</summary>
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartTime { get; set; }
    
        /// <summary>Интервал повтора (повторять задание каждые n минут).</summary>
        [Newtonsoft.Json.JsonProperty("retryInterval", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RetryInterval { get; set; }
    
        /// <summary>Время окончания интервала времени, в течение которого разрешено выполнять задание (минут).</summary>
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EndTime { get; set; }
    
    
    }
    
    /// <summary>Приоритет задания на опрос.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PollTaskPriority
    {
        [System.Runtime.Serialization.EnumMember(Value = @"RealTime")]
        RealTime = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"High")]
        High = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AboveNormal")]
        AboveNormal = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BelowNormal")]
        BelowNormal = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Low")]
        Low = 5,
    
    }
    
    /// <summary>Параметры автоопроса точки учёта.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PollTaskMeasurePoint 
    {
        /// <summary>Идентификатор задания.</summary>
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TaskId { get; set; }
    
        /// <summary>Идентификатор точки учёта.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointId { get; set; }
    
        /// <summary>Флаг выполнять или нет коррекцию времени.</summary>
        [Newtonsoft.Json.JsonProperty("performTimeCorrection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PerformTimeCorrection { get; set; }
    
        /// <summary>Маска запрошенных данных.</summary>
        [Newtonsoft.Json.JsonProperty("requestedDataMask", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceDataType RequestedDataMask { get; set; }
    
        /// <summary>Дата постановки точки учёта на автоопрос.</summary>
        [Newtonsoft.Json.JsonProperty("autoPollStartDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset AutoPollStartDate { get; set; }
    
        /// <summary>Признак подключения по умолчанию.</summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }
    
        /// <summary>Опрашивать только если задание по умолчанию завершилось с ошибкой.</summary>
        [Newtonsoft.Json.JsonProperty("startIfDefaultFailed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool StartIfDefaultFailed { get; set; }
    
    
    }
    
    /// <summary>Класс слоя доступа к данным задания на опрос.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PollTask 
    {
        /// <summary>Идентификатор задания на опрос.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Текущее состояние задания.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PollTaskState State { get; set; }
    
        /// <summary>Количество совершенных попыток выполнить задание.</summary>
        [Newtonsoft.Json.JsonProperty("attempt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Attempt { get; set; }
    
        /// <summary>Начало текущей попытки - если задание выполняется, начало периода, в течение которого разрешено выполнение попыток - если не выполняется.</summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartDate { get; set; }
    
        /// <summary>Время окончания периода, в течение которого разрешено выполнение задания.</summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EndDate { get; set; }
    
        /// <summary>Дата и время начала последней попытки выполнения задания.</summary>
        [Newtonsoft.Json.JsonProperty("lastAttemptTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastAttemptTime { get; set; }
    
        /// <summary>Дата и время окончания последней попытки выполнения задания.</summary>
        [Newtonsoft.Json.JsonProperty("lastAttemptEndTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastAttemptEndTime { get; set; }
    
        /// <summary>Код результата последней попытки выполнения задания.</summary>
        [Newtonsoft.Json.JsonProperty("lastAttemptResultCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskCompletionCode? LastAttemptResultCode { get; set; }
    
        /// <summary>Наименование задания.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>Тип задания.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PollTaskType Type { get; set; }
    
        /// <summary>Максимальное количество попыток опроса.</summary>
        [Newtonsoft.Json.JsonProperty("maxAttempts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxAttempts { get; set; }
    
        /// <summary>Идентификатор подключения.</summary>
        [Newtonsoft.Json.JsonProperty("pollConnectionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PollConnectionId { get; set; }
    
        /// <summary>Флаг работы в режиме удалённого пульта.</summary>
        [Newtonsoft.Json.JsonProperty("isRemoteConsoleMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsRemoteConsoleMode { get; set; }
    
        /// <summary>Интервал опроса текущих данных.</summary>
        [Newtonsoft.Json.JsonProperty("pollInstantInterval", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PollInstantInterval { get; set; }
    
        /// <summary>Указывает на то, что при опросе должны быть загружены только отсутствующие данные за указанный период.</summary>
        [Newtonsoft.Json.JsonProperty("loadAbsentDataOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LoadAbsentDataOnly { get; set; }
    
        /// <summary>Расписание опроса.</summary>
        [Newtonsoft.Json.JsonProperty("schedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Schedule Schedule { get; set; }
    
        /// <summary>Приоритет выполнения.</summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PollTaskPriority Priority { get; set; }
    
        /// <summary>Таймаут до выполнения следующей попытки опроса.</summary>
        [Newtonsoft.Json.JsonProperty("nextAttemptDelay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NextAttemptDelay { get; set; }
    
        /// <summary>Список точек учёта в задании.</summary>
        [Newtonsoft.Json.JsonProperty("measurePoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PollTaskMeasurePoint> MeasurePoints { get; set; }
    
        /// <summary>Идентификатор учётной записи, которая создала задание.</summary>
        [Newtonsoft.Json.JsonProperty("creatorAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CreatorAccountId { get; set; }
    
    
    }
    
    /// <summary>Параметры постановки точки учёта на резервный опрос.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class BackupPollSettings 
    {
        /// <summary>Указывает что резервный опрос активен.</summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; }
    
        /// <summary>Идентификатор подключения для резервного опроса.</summary>
        [Newtonsoft.Json.JsonProperty("connectionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ConnectionId { get; set; }
    
        /// <summary>Время начала резервного опроса (в минутах с начала суток).</summary>
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartTime { get; set; }
    
    
    }
    
    /// <summary>Теплопотери.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HeatLoss 
    {
        /// <summary>Год.</summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Year { get; set; }
    
        /// <summary>Возвращает теплопотери на январь.</summary>
        [Newtonsoft.Json.JsonProperty("jan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Jan { get; set; }
    
        /// <summary>Возвращает теплопотери на февраль.</summary>
        [Newtonsoft.Json.JsonProperty("feb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Feb { get; set; }
    
        /// <summary>Возвращает теплопотери на март.</summary>
        [Newtonsoft.Json.JsonProperty("mar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Mar { get; set; }
    
        /// <summary>Возвращает теплопотери на апрель.</summary>
        [Newtonsoft.Json.JsonProperty("apr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Apr { get; set; }
    
        /// <summary>Возвращает теплопотери на май.</summary>
        [Newtonsoft.Json.JsonProperty("may", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? May { get; set; }
    
        /// <summary>Возвращает теплопотери на июнь.</summary>
        [Newtonsoft.Json.JsonProperty("jun", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Jun { get; set; }
    
        /// <summary>Возвращает теплопотери на июль.</summary>
        [Newtonsoft.Json.JsonProperty("jul", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Jul { get; set; }
    
        /// <summary>Возвращает теплопотери на август.</summary>
        [Newtonsoft.Json.JsonProperty("aug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Aug { get; set; }
    
        /// <summary>Возвращает теплопотери на сентябрь.</summary>
        [Newtonsoft.Json.JsonProperty("sep", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Sep { get; set; }
    
        /// <summary>Возвращает теплопотери на октябрь.</summary>
        [Newtonsoft.Json.JsonProperty("oct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Oct { get; set; }
    
        /// <summary>Возвращает теплопотери на ноябрь.</summary>
        [Newtonsoft.Json.JsonProperty("nov", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Nov { get; set; }
    
        /// <summary>Возвращает теплопотери на декабрь.</summary>
        [Newtonsoft.Json.JsonProperty("dec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Dec { get; set; }
    
        /// <summary>Возвращает процент тепловых потерь от фактического теплопотребления.</summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Percent { get; set; }
    
        /// <summary>Возвращает нормативные часовые теплоптери (ГКал/час)</summary>
        [Newtonsoft.Json.JsonProperty("hour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Hour { get; set; }
    
    
    }
    
    /// <summary>Типы отчетов.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ReportType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ParametersSheet")]
        ParametersSheet = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Act")]
        Act = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Summary")]
        Summary = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MeasurePointConsumptionParameters")]
        MeasurePointConsumptionParameters = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Balance")]
        Balance = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FixedNodes")]
        FixedNodes = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CommunalMeasurePointSummary")]
        CommunalMeasurePointSummary = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SystemState")]
        SystemState = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NodePassport")]
        NodePassport = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BalanceGroup")]
        BalanceGroup = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NodeJob")]
        NodeJob = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Calibration")]
        Calibration = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WorkOrder")]
        WorkOrder = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NodeMeasurePointSummary")]
        NodeMeasurePointSummary = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Register")]
        Register = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BalanceSummary")]
        BalanceSummary = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SummaryInterval")]
        SummaryInterval = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EquipmentSummary")]
        EquipmentSummary = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IncidentSummary")]
        IncidentSummary = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CompareMeasurePointConsumption")]
        CompareMeasurePointConsumption = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CompareNodeConsumption")]
        CompareNodeConsumption = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RaisingOn")]
        RaisingOn = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dispose")]
        Dispose = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RepeatedPermit")]
        RepeatedPermit = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Failure")]
        Failure = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Check")]
        Check = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FirstPermit")]
        FirstPermit = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LowQualityWater")]
        LowQualityWater = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LowQualityHotWater")]
        LowQualityHotWater = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FirstPermitForNode")]
        FirstPermitForNode = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RepeatedPermitForNode")]
        RepeatedPermitForNode = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MeasurePointSummaryAdmissionDate")]
        MeasurePointSummaryAdmissionDate = 32,
    
    }
    
    /// <summary>Тип объектов, используемый в отчетных формах.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ReportEntity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MeasurePoint")]
        MeasurePoint = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Room")]
        Room = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"House")]
        House = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Device")]
        Device = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"System")]
        System = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BalanceGroup")]
        BalanceGroup = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NodeJob")]
        NodeJob = 8,
    
    }
    
    /// <summary>Источники данных</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DataSourceMask
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MeasurePoint")]
        MeasurePoint = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RSO")]
        RSO = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TotalsStartEnd")]
        TotalsStartEnd = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hour")]
        Hour = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Range")]
        Range = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MeasurePointSummary")]
        MeasurePointSummary = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nodes")]
        Nodes = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NodeAttribute")]
        NodeAttribute = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NodeMeasurePoints")]
        NodeMeasurePoints = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NodeConsumption")]
        NodeConsumption = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NodeSummary")]
        NodeSummary = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sensors")]
        Sensors = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Device")]
        Device = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElectricPower")]
        ElectricPower = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Totals")]
        Totals = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EstimatedConsumption")]
        EstimatedConsumption = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SystemCommon")]
        SystemCommon = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CriticalEvents")]
        CriticalEvents = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LastConsumption")]
        LastConsumption = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AvgDayValues")]
        AvgDayValues = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SummaryConsumption")]
        SummaryConsumption = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WithoutDataConsumption")]
        WithoutDataConsumption = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContingencyConsumption")]
        ContingencyConsumption = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeviceConfigParam")]
        DeviceConfigParam = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MeasurePointAttribute")]
        MeasurePointAttribute = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeviceEvent")]
        DeviceEvent = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeviceError")]
        DeviceError = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeviceModelModification")]
        DeviceModelModification = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TotalsStartEndArchiveCurrent")]
        TotalsStartEndArchiveCurrent = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TotalsStartEndPeriod")]
        TotalsStartEndPeriod = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MeasurePointTable")]
        MeasurePointTable = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Consumption")]
        Consumption = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Inspector")]
        Inspector = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NodeBalanceValues")]
        NodeBalanceValues = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EquipmentHistory")]
        EquipmentHistory = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LowQualityWater")]
        LowQualityWater = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IncidentParameters")]
        IncidentParameters = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IncidentCount")]
        IncidentCount = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HouseBalance")]
        HouseBalance = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContractLoads")]
        ContractLoads = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Equipment")]
        Equipment = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EquipmentModel")]
        EquipmentModel = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EquipmentModelModification")]
        EquipmentModelModification = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LastTotals")]
        LastTotals = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ComDevice")]
        ComDevice = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PollPort")]
        PollPort = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PollSettings")]
        PollSettings = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EquipmentLastReadParameters")]
        EquipmentLastReadParameters = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CompareMeasurePontConsumptionParameters")]
        CompareMeasurePontConsumptionParameters = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CompareNodeConsumptionParameters")]
        CompareNodeConsumptionParameters = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Units")]
        Units = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MonthStdTemperatures")]
        MonthStdTemperatures = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GeneralErrors")]
        GeneralErrors = 58,
    
    }
    
    /// <summary>Алгоритм расчета отсутствующих потреблений по средним значениям используемый при формировании отчета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ConsumptionEstimationAlgorithm
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AvgDay")]
        AvgDay = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AvgHour")]
        AvgHour = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Average")]
        Average = 3,
    
    }
    
    /// <summary>Модель устройства.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DeviceModel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TSR_010")]
        TSR_010 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KM_5_4")]
        KM_5_4 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SA_94_2")]
        SA_94_2 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPT_943")]
        SPT_943 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPT_961")]
        SPT_961 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPT_941")]
        SPT_941 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPT_942")]
        SPT_942 = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TSRV_026M")]
        TSRV_026M = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KM_5_1")]
        KM_5_1 = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Seb2a07")]
        Seb2a07 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KM_5_6")]
        KM_5_6 = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPT_941_10_11")]
        SPT_941_10_11 = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VKT_5")]
        VKT_5 = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pulsar10")]
        Pulsar10 = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pulsar16")]
        Pulsar16 = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Psc3Ta07")]
        Psc3Ta07 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EK_260")]
        EK_260 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EK_270")]
        EK_270 = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Minol")]
        Minol = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TSRV_023")]
        TSRV_023 = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TSRV_022")]
        TSRV_022 = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RM_5")]
        RM_5 = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPT_961_1_2")]
        SPT_961_1_2 = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VKT_7")]
        VKT_7 = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KM_5_6I")]
        KM_5_6I = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SevenKT")]
        SevenKT = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon17")]
        Tekon17 = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SKU_01")]
        SKU_01 = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Karat_2001")]
        Karat_2001 = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SKU_02")]
        SKU_02 = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KM_5_2")]
        KM_5_2 = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KM_5_3")]
        KM_5_3 = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KM_5_5")]
        KM_5_5 = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPT_961M")]
        SPT_961M = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TSRV_030")]
        TSRV_030 = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TRM_138")]
        TRM_138 = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MKTS")]
        MKTS = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ELF")]
        ELF = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TMK_N3")]
        TMK_N3 = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KaratM")]
        KaratM = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TMK_N13")]
        TMK_N13 = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Karat011")]
        Karat011 = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TMK_N12")]
        TMK_N12 = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KM_5M")]
        KM_5M = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TSRV_031")]
        TSRV_031 = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TSRV_032")]
        TSRV_032 = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TSRV_033")]
        TSRV_033 = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TSRV_034")]
        TSRV_034 = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUMMATOR_3")]
        SUMMATOR_3 = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Karat")]
        Karat = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TMK_N2")]
        TMK_N2 = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TSRV_024M")]
        TSRV_024M = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TMK_N1")]
        TMK_N1 = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury230_ART")]
        Mercury230_ART = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BK")]
        BK = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TSRV_024")]
        TSRV_024 = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TSRV_010M")]
        TSRV_010M = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TEM_106")]
        TEM_106 = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Psc4Tm05")]
        Psc4Tm05 = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TEM_104")]
        TEM_104 = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Set4Tm03M")]
        Set4Tm03M = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Spg761_12")]
        Spg761_12 = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MULTICAL_601")]
        MULTICAL_601 = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MULTICAL_66CDE")]
        MULTICAL_66CDE = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KARAT_307")]
        KARAT_307 = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TMK_N120")]
        TMK_N120 = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SKM_01")]
        SKM_01 = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MICONT_186")]
        MICONT_186 = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SKM_02")]
        SKM_02 = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TECON_19")]
        TECON_19 = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IM2300")]
        IM2300 = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SE303")]
        SE303 = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TMK_N130")]
        TMK_N130 = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STU_1")]
        STU_1 = 74,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SOE_5")]
        SOE_5 = 75,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TSRV_022M")]
        TSRV_022M = 76,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P18")]
        P18 = 77,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KARAT_Compact")]
        KARAT_Compact = 78,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Magika")]
        Magika = 79,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BI_02")]
        BI_02 = 80,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TMK_N20")]
        TMK_N20 = 81,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IM2300a")]
        IM2300a = 82,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TMK_N30")]
        TMK_N30 = 83,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TSRV_020")]
        TSRV_020 = 84,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RsSoe55")]
        RsSoe55 = 85,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pulsar10M")]
        Pulsar10M = 86,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MinocalCombi")]
        MinocalCombi = 87,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TS_07")]
        TS_07 = 88,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VtdV")]
        VtdV = 89,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VTD_U")]
        VTD_U = 90,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Spg762_12")]
        Spg762_12 = 91,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VTE_1K_1_2")]
        VTE_1K_1_2 = 92,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TEPLOCON_01")]
        TEPLOCON_01 = 93,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TV_7")]
        TV_7 = 94,
    
        [System.Runtime.Serialization.EnumMember(Value = @"US800")]
        US800 = 95,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury203")]
        Mercury203 = 96,
    
        [System.Runtime.Serialization.EnumMember(Value = @"URSV_010M")]
        URSV_010M = 97,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MagikaT")]
        MagikaT = 98,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SE_301")]
        SE_301 = 99,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RadioPulsar16")]
        RadioPulsar16 = 100,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SA_942M")]
        SA_942M = 101,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Se102")]
        Se102 = 102,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prem")]
        Prem = 103,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dnepr7Old")]
        Dnepr7Old = 104,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pulsar2M")]
        Pulsar2M = 105,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RadioPulsar24")]
        RadioPulsar24 = 106,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PiterFlow")]
        PiterFlow = 107,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VKT_4M")]
        VKT_4M = 108,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TSRV_026")]
        TSRV_026 = 109,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SE102M")]
        SE102M = 110,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MSD200")]
        MSD200 = 111,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Teplo3V")]
        Teplo3V = 112,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ivk101")]
        Ivk101 = 113,
    
        [System.Runtime.Serialization.EnumMember(Value = @"StrumenTV07")]
        StrumenTV07 = 114,
    
        [System.Runtime.Serialization.EnumMember(Value = @"StrumenTV05")]
        StrumenTV05 = 115,
    
        [System.Runtime.Serialization.EnumMember(Value = @"T21")]
        T21 = 116,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ce6850M")]
        Ce6850M = 117,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ce2727")]
        Ce2727 = 118,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EchoR")]
        EchoR = 119,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SVTU_10M_Mx")]
        SVTU_10M_Mx = 120,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kst22")]
        Kst22 = 121,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MK_N1")]
        MK_N1 = 122,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Multical602")]
        Multical602 = 123,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NevaMt313")]
        NevaMt313 = 124,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Spg741")]
        Spg741 = 125,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vkt4")]
        Vkt4 = 126,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mr01")]
        Mr01 = 127,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KaratCompact201")]
        KaratCompact201 = 128,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TmkN100")]
        TmkN100 = 129,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MagikaV4")]
        MagikaV4 = 130,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Spg761")]
        Spg761 = 131,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bi03")]
        Bi03 = 132,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VisT_TS")]
        VisT_TS = 133,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Neva123")]
        Neva123 = 134,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarHeatMeter")]
        PulsarHeatMeter = 135,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mvt2M")]
        Mvt2M = 136,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mvt2Mnk")]
        Mvt2Mnk = 137,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MulticalIII66R")]
        MulticalIII66R = 138,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MalahitTS8")]
        MalahitTS8 = 139,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elf")]
        Elf = 140,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pulsar16M")]
        Pulsar16M = 141,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury200")]
        Mercury200 = 142,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Milur104")]
        Milur104 = 143,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Spg742")]
        Spg742 = 144,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tsrv024Mplus")]
        Tsrv024Mplus = 145,
    
        [System.Runtime.Serialization.EnumMember(Value = @"T350")]
        T350 = 146,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dio99M")]
        Dio99M = 147,
    
        [System.Runtime.Serialization.EnumMember(Value = @"McSoe55")]
        McSoe55 = 148,
    
        [System.Runtime.Serialization.EnumMember(Value = @"T230")]
        T230 = 149,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ursv5xxC")]
        Ursv5xxC = 150,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury233")]
        Mercury233 = 151,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tsrv027")]
        Tsrv027 = 152,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NevaMt314")]
        NevaMt314 = 153,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TeRoss")]
        TeRoss = 154,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sonometer1100")]
        Sonometer1100 = 155,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pramer710")]
        Pramer710 = 156,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VtdL")]
        VtdL = 157,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VtdG")]
        VtdG = 158,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Spt941_20")]
        Spt941_20 = 159,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TesmartTem104")]
        TesmartTem104 = 160,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TesmartTem106")]
        TesmartTem106 = 161,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tem104K")]
        Tem104K = 162,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SA_94_1")]
        SA_94_1 = 163,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IrvisRs4")]
        IrvisRs4 = 164,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BvrmSvp")]
        BvrmSvp = 165,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Encont")]
        Encont = 166,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarColdWaterMeter")]
        PulsarColdWaterMeter = 167,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarHotWaterMeter")]
        PulsarHotWaterMeter = 168,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rsl2xx")]
        Rsl2xx = 169,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vkt9")]
        Vkt9 = 170,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VisT_VS")]
        VisT_VS = 171,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TC220")]
        TC220 = 172,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Milur305")]
        Milur305 = 173,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VodoleyM")]
        VodoleyM = 174,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SVTU_10M_Mx_RP")]
        SVTU_10M_Mx_RP = 175,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury234_ART")]
        Mercury234_ART = 176,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EltekoTc555")]
        EltekoTc555 = 177,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vtd")]
        Vtd = 178,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pramer5251")]
        Pramer5251 = 179,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Milur105")]
        Milur105 = 180,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RO_2M")]
        RO_2M = 181,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vte1K3")]
        Vte1K3 = 182,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RUS_1M")]
        RUS_1M = 183,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KUB_1")]
        KUB_1 = 184,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Karat306")]
        Karat306 = 185,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Karat308")]
        Karat308 = 186,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Se805")]
        Se805 = 187,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TC215")]
        TC215 = 188,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Psc3Tm05")]
        Psc3Tm05 = 189,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vte1P_141M")]
        Vte1P_141M = 190,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VectorV3")]
        VectorV3 = 191,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Psc3Tm05D")]
        Psc3Tm05D = 192,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Psc4Tm05MK")]
        Psc4Tm05MK = 193,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Psc4Tm05D")]
        Psc4Tm05D = 194,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Seb1Tm01")]
        Seb1Tm01 = 195,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Seb1Tm02")]
        Seb1Tm02 = 196,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Seb1Tm02D")]
        Seb1Tm02D = 197,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Seb1Tm02M")]
        Seb1Tm02M = 198,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Seo116")]
        Seo116 = 199,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Set1m01")]
        Set1m01 = 200,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Set4Tm02")]
        Set4Tm02 = 201,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Set4Tm02M")]
        Set4Tm02M = 202,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Set4Tm03")]
        Set4Tm03 = 203,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Seb2a07D")]
        Seb2a07D = 204,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Psc3Art07")]
        Psc3Art07 = 205,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Psc3Art07D")]
        Psc3Art07D = 206,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Psc3Art08")]
        Psc3Art08 = 207,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Seb2a08")]
        Seb2a08 = 208,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Qheat")]
        Qheat = 209,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BeryllSte10")]
        BeryllSte10 = 210,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BeryllSte21")]
        BeryllSte21 = 211,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tsrv042")]
        Tsrv042 = 212,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Psc4Tm05M")]
        Psc4Tm05M = 213,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Psc3Tm05M")]
        Psc3Tm05M = 214,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vkg2")]
        Vkg2 = 215,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mtr06")]
        Mtr06 = 216,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vte1_P140M")]
        Vte1_P140M = 217,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vte1_P141")]
        Vte1_P141 = 218,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tssh1M02")]
        Tssh1M02 = 219,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Set1_4M")]
        Set1_4M = 220,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mur10012Tsm")]
        Mur10012Tsm = 221,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ts11")]
        Ts11 = 222,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RTU102")]
        RTU102 = 223,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Milur304")]
        Milur304 = 224,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mayak101AT")]
        Mayak101AT = 225,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Psc4Tm05Md")]
        Psc4Tm05Md = 226,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mark409")]
        Mark409 = 227,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MalahitTS8s")]
        MalahitTS8s = 228,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Um31")]
        Um31 = 229,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DecontA9")]
        DecontA9 = 230,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BktM")]
        BktM = 231,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Adi")]
        Adi = 232,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury225_21")]
        Mercury225_21 = 233,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury206")]
        Mercury206 = 234,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gsm12T")]
        Gsm12T = 235,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pulsar4M")]
        Pulsar4M = 236,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pulsar6")]
        Pulsar6 = 237,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Art05")]
        Art05 = 238,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Svtu10M5MX")]
        Svtu10M5MX = 239,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Trm123M01")]
        Trm123M01 = 240,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Urg2Km")]
        Urg2Km = 241,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dcm200M")]
        Dcm200M = 242,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IvkTer")]
        IvkTer = 243,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarHeatMeterNew")]
        PulsarHeatMeterNew = 244,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dnepr7")]
        Dnepr7 = 245,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ZhetysuErgomera125Av")]
        ZhetysuErgomera125Av = 246,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SevenKt")]
        SevenKt = 247,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury230_AR")]
        Mercury230_AR = 248,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury230_AM")]
        Mercury230_AM = 249,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Spt944")]
        Spt944 = 250,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury225_11")]
        Mercury225_11 = 251,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SonoSelect10")]
        SonoSelect10 = 252,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SonoSafe10")]
        SonoSafe10 = 253,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KM_5_B3")]
        KM_5_B3 = 254,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RM_5_B3")]
        RM_5_B3 = 255,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarM")]
        PulsarM = 256,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tsrv043")]
        Tsrv043 = 257,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stk")]
        Stk = 258,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pulsar2Gprs")]
        Pulsar2Gprs = 259,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NevaMt124")]
        NevaMt124 = 260,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ssdu03")]
        Ssdu03 = 261,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rsc")]
        Rsc = 262,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TopenarCombi")]
        TopenarCombi = 263,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tva1")]
        Tva1 = 264,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KaratCompact2_213")]
        KaratCompact2_213 = 265,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sonometer500")]
        Sonometer500 = 266,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsSt15B")]
        PulsSt15B = 267,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tsrv025")]
        Tsrv025 = 268,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tesma106")]
        Tesma106 = 269,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sa94_3A")]
        Sa94_3A = 270,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ivk102")]
        Ivk102 = 271,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LinergoResource")]
        LinergoResource = 272,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Us800_4")]
        Us800_4 = 273,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sipu")]
        Sipu = 274,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ivk102P")]
        Ivk102P = 275,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Milur107")]
        Milur107 = 276,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Akron02_1Rs232")]
        Akron02_1Rs232 = 277,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Akron02_2Rs485")]
        Akron02_2Rs485 = 278,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarHeatMeterV4")]
        PulsarHeatMeterV4 = 279,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarHeatMeterUltrasonic")]
        PulsarHeatMeterUltrasonic = 280,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarWaterMeterModuleV6")]
        PulsarWaterMeterModuleV6 = 281,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vte1P12")]
        Vte1P12 = 282,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Milur307")]
        Milur307 = 283,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sks3")]
        Sks3 = 284,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tem116")]
        Tem116 = 285,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rsl")]
        Rsl = 286,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ts11_2")]
        Ts11_2 = 287,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SanextMono")]
        SanextMono = 288,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsSTK")]
        PulsSTK = 289,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Adm100")]
        Adm100 = 290,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarGprsV2")]
        PulsarGprsV2 = 291,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VtdUv")]
        VtdUv = 292,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Seb2A05")]
        Seb2A05 = 293,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NevaMt323")]
        NevaMt323 = 294,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NevaMt324Ar")]
        NevaMt324Ar = 295,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_01")]
        Tekon19_01 = 296,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_02")]
        Tekon19_02 = 297,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_03")]
        Tekon19_03 = 298,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_04")]
        Tekon19_04 = 299,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_05")]
        Tekon19_05 = 300,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_06")]
        Tekon19_06 = 301,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_07")]
        Tekon19_07 = 302,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_08")]
        Tekon19_08 = 303,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_09")]
        Tekon19_09 = 304,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_10")]
        Tekon19_10 = 305,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_11")]
        Tekon19_11 = 306,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_12")]
        Tekon19_12 = 307,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_13")]
        Tekon19_13 = 308,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_14")]
        Tekon19_14 = 309,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_01M")]
        Tekon19_01M = 310,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_02M")]
        Tekon19_02M = 311,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_03M")]
        Tekon19_03M = 312,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_04M")]
        Tekon19_04M = 313,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_05M")]
        Tekon19_05M = 314,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_06M")]
        Tekon19_06M = 315,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_07M")]
        Tekon19_07M = 316,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_08M")]
        Tekon19_08M = 317,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_09M")]
        Tekon19_09M = 318,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekon19_10M")]
        Tekon19_10M = 319,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mayak101Atd")]
        Mayak101Atd = 320,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Se805M")]
        Se805M = 321,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Seb1Tm03")]
        Seb1Tm03 = 322,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury236_ART")]
        Mercury236_ART = 323,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NevaMt113")]
        NevaMt113 = 324,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Psc4Tm05Mn")]
        Psc4Tm05Mn = 325,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarHeatMeterUltrasonicV2")]
        PulsarHeatMeterUltrasonicV2 = 326,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SanextMonoRm")]
        SanextMonoRm = 327,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Expert9xxMx")]
        Expert9xxMx = 328,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EclComfort210")]
        EclComfort210 = 329,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury234_ARTM")]
        Mercury234_ARTM = 330,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vkg3T")]
        Vkg3T = 331,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarHeatMeterV9")]
        PulsarHeatMeterV9 = 332,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IrvisRs4M")]
        IrvisRs4M = 333,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IrvisRs4Ultra")]
        IrvisRs4Ultra = 334,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IrvisRs4MUltra")]
        IrvisRs4MUltra = 335,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Trm200")]
        Trm200 = 336,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TsrvSmart")]
        TsrvSmart = 337,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rim09902")]
        Rim09902 = 338,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Spt961_1_2M")]
        Spt961_1_2M = 339,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RO2")]
        RO2 = 340,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarHeatMeterV3")]
        PulsarHeatMeterV3 = 341,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Spt962")]
        Spt962 = 342,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tsrk011")]
        Tsrk011 = 343,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sku4")]
        Sku4 = 344,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Spt963")]
        Spt963 = 345,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OmegaTr")]
        OmegaTr = 346,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElmetroVier104K")]
        ElmetroVier104K = 347,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElmetroVier104KEx")]
        ElmetroVier104KEx = 348,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tvk01")]
        Tvk01 = 349,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vtr110Iv10")]
        Vtr110Iv10 = 350,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tvk02")]
        Tvk02 = 351,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sku02B")]
        Sku02B = 352,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Km9")]
        Km9 = 353,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dds26D")]
        Dds26D = 354,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Se102R51")]
        Se102R51 = 355,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarHeatMeterV8")]
        PulsarHeatMeterV8 = 356,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarWaterMeterV1_1")]
        PulsarWaterMeterV1_1 = 357,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SevenKt444")]
        SevenKt444 = 358,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Trm232M")]
        Trm232M = 359,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarWaterMeterV1_9")]
        PulsarWaterMeterV1_9 = 360,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pulsar6M")]
        Pulsar6M = 361,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarHeatMeterUltrasonicV42")]
        PulsarHeatMeterUltrasonicV42 = 362,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mayak301Art131T")]
        Mayak301Art131T = 363,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MayakT301Art153T")]
        MayakT301Art153T = 364,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mayak301Art151T")]
        Mayak301Art151T = 365,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Se208Spodes")]
        Se208Spodes = 366,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Se308Spodes")]
        Se308Spodes = 367,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mayak301Artd153T")]
        Mayak301Artd153T = 368,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Term02")]
        Term02 = 369,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Se208Iec")]
        Se208Iec = 370,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Se308Iec")]
        Se308Iec = 371,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rtu602")]
        Rtu602 = 372,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PramerTs100")]
        PramerTs100 = 373,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EclComfort310")]
        EclComfort310 = 374,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarHeatMeterUltrasonicV31")]
        PulsarHeatMeterUltrasonicV31 = 375,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Multical603")]
        Multical603 = 376,
    
    }
    
    /// <summary>Вариант выбора единиц измерения при формировании отчета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ReportUnits
    {
        [System.Runtime.Serialization.EnumMember(Value = @"System")]
        System = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MeasurePoint")]
        MeasurePoint = 1,
    
    }
    
    /// <summary>Представляет шаблон отчетной формы.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ReportTemplate 
    {
        /// <summary>Идентификатор.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Наименование отчетной формы.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>Тип отчетной формы.</summary>
        [Newtonsoft.Json.JsonProperty("reportType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportType ReportType { get; set; }
    
        /// <summary>Системная сущность, для которой создана отчетная форма.</summary>
        [Newtonsoft.Json.JsonProperty("reportEntity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportEntity ReportEntity { get; set; }
    
        /// <summary>Возвращает признак того, что отчетная форма является актом.</summary>
        [Newtonsoft.Json.JsonProperty("isAct", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAct { get; set; }
    
        /// <summary>Комментарий.</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        /// <summary>Признак пользовательской отчетной формы.</summary>
        [Newtonsoft.Json.JsonProperty("isUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsUser { get; set; }
    
        /// <summary>Маска используемых таблиц с данными для формирования отчета.</summary>
        [Newtonsoft.Json.JsonProperty("dataSourceMask", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DataSourceMask DataSourceMask { get; set; }
    
        /// <summary>Шаблон отчетной формы.</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Data { get; set; }
    
        /// <summary>Структура источника данных в виде массива байт XML-представления DataSet.</summary>
        [Newtonsoft.Json.JsonProperty("dataSourceAsXml", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] DataSourceAsXml { get; set; }
    
        /// <summary>Имя таблицы, из которой будут браться данные для тела отчета (секции Detail).</summary>
        [Newtonsoft.Json.JsonProperty("dataMember", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DataMember { get; set; }
    
        /// <summary>Версия.</summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        /// <summary>Количество точек учета в системе теплоснабжения.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointCountHeat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointCountHeat { get; set; }
    
        /// <summary>Количество точек учета в системе ГВС.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointCountHotWater", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointCountHotWater { get; set; }
    
        /// <summary>Количество точек учета в системе ХВС.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointCountColdWater", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointCountColdWater { get; set; }
    
        /// <summary>Количество точек учета в системе Водоотведения.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointCountSewage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointCountSewage { get; set; }
    
        /// <summary>Количество точек учета в системе Пароснабжение.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointCountSteam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointCountSteam { get; set; }
    
        /// <summary>Количество точек учета в системе газоснабжения.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointCountGas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointCountGas { get; set; }
    
        /// <summary>Количество точек учета в системе электроснабжения.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointCountElectricity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointCountElectricity { get; set; }
    
        /// <summary>Количество точек учета в системе регулирования.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointCountControl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointCountControl { get; set; }
    
        /// <summary>Номер сборки, в которой создана отчетная форма.</summary>
        [Newtonsoft.Json.JsonProperty("buildNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BuildNumber { get; set; }
    
        /// <summary>Массив идентификаторов объектов, которые используются в отчетах с фиксированным набором объектов.</summary>
        [Newtonsoft.Json.JsonProperty("idList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> IdList { get; set; }
    
        /// <summary>Алгоритм расчета отсутствующих потреблений по средним значениям используемый при формировании отчета.</summary>
        [Newtonsoft.Json.JsonProperty("estimationAlgorithm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConsumptionEstimationAlgorithm EstimationAlgorithm { get; set; }
    
        /// <summary>Длительность периода для расчета среднесуточных значений.</summary>
        [Newtonsoft.Json.JsonProperty("dailyAverageCalculatingPeriod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DailyAverageCalculatingPeriod { get; set; }
    
        /// <summary>Модель устройства на точке учета.</summary>
        [Newtonsoft.Json.JsonProperty("deviceModel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceModel DeviceModel { get; set; }
    
        /// <summary>Единицы измерения используемые при формировании отчета.</summary>
        [Newtonsoft.Json.JsonProperty("reportUnits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportUnits ReportUnits { get; set; }
    
    
    }
    
    /// <summary>Информация по датчику.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Sensor 
    {
        /// <summary>Идентификатор экземпляра оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EquipmentId { get; set; }
    
        /// <summary>Ссылка на экземпляр оборудования.</summary>
        [Newtonsoft.Json.JsonProperty("equipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Equipment Equipment { get; set; }
    
        /// <summary>Идентификатор точки учёта.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointId { get; set; }
    
        /// <summary>Измеряемый параметр.</summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DataParameter Parameter { get; set; }
    
    
    }
    
    /// <summary>Структура хранения списка назначенных отчетных форм</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MeasurePointReport 
    {
        /// <summary>Идентификатор точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointId { get; set; }
    
        /// <summary>Наименование точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MeasurePointTitle { get; set; }
    
        /// <summary>Идентификатор отчета.</summary>
        [Newtonsoft.Json.JsonProperty("reportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReportId { get; set; }
    
        /// <summary>Наименование отчета.</summary>
        [Newtonsoft.Json.JsonProperty("reportTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportTitle { get; set; }
    
        /// <summary>Идентификатор отчетной формы.</summary>
        [Newtonsoft.Json.JsonProperty("reportTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReportTemplateId { get; set; }
    
        /// <summary>Наименование отчетной формы.</summary>
        [Newtonsoft.Json.JsonProperty("reportTemplateTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportTemplateTitle { get; set; }
    
    
    }
    
    /// <summary>Определяет месяц или день в периоде формирования отчета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ReportPeriodMonthDay
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Previous")]
        Previous = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Current")]
        Current = 1,
    
    }
    
    /// <summary>Тип периода формирования отчета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ReportPeriodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"EveryMonth")]
        EveryMonth = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Everyday")]
        Everyday = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LastDays")]
        LastDays = 2,
    
    }
    
    /// <summary>Представляет модель пользовательского параметра используемого при формировании отчетов.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ReportParameter 
    {
        /// <summary>Идентификатор пользовательского параметра.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Идентификатор отчета, в котором используется пользовательский параметр.</summary>
        [Newtonsoft.Json.JsonProperty("reportId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ReportId { get; set; }
    
        /// <summary>Идентификатор свойств пользовательского параметра Lers.Models.ReportParameterProperty.</summary>
        [Newtonsoft.Json.JsonProperty("reportParameterPropertyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ReportParameterPropertyId { get; set; }
    
        /// <summary>Значение пользовательского параметра.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
    
    }
    
    /// <summary>Описывает отчет.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Report 
    {
        /// <summary>Идентификатор отчета.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Наименование отчета.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }
    
        /// <summary>Возвращает значение, определяющее, является ли данный отчет системным.</summary>
        [Newtonsoft.Json.JsonProperty("isSystem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSystem { get; set; }
    
        /// <summary>Тип сущности.</summary>
        [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportEntity Entity { get; set; }
    
        /// <summary>Возвращает тип данных, которые содержатся в отчете.</summary>
        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceDataType DataType { get; set; }
    
        /// <summary>Возвращает тип отчета.</summary>
        [Newtonsoft.Json.JsonProperty("reportType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportType ReportType { get; set; }
    
        /// <summary>Возвращает признак того, что отчет является актом.</summary>
        [Newtonsoft.Json.JsonProperty("isAct", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAct { get; set; }
    
        /// <summary>Возвращает номер дня или часа начала периода отчета.</summary>
        [Newtonsoft.Json.JsonProperty("periodStartDayOrHour", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PeriodStartDayOrHour { get; set; }
    
        /// <summary>Возвращает месяц начала периода отчета.</summary>
        [Newtonsoft.Json.JsonProperty("periodStartMonthOrDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportPeriodMonthDay PeriodStartMonthOrDay { get; set; }
    
        /// <summary>Возвращает номер дня или часа окончания периода отчета.</summary>
        [Newtonsoft.Json.JsonProperty("periodEndDayOrHour", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PeriodEndDayOrHour { get; set; }
    
        /// <summary>Возвращает месяц окончания периода отчета.</summary>
        [Newtonsoft.Json.JsonProperty("periodEndMonthOrDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportPeriodMonthDay PeriodEndMonthOrDay { get; set; }
    
        /// <summary>Возвращает количество последних дней, за которые надо формировать отчет.</summary>
        [Newtonsoft.Json.JsonProperty("periodLastDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PeriodLastDays { get; set; }
    
        /// <summary>Тип периода.</summary>
        [Newtonsoft.Json.JsonProperty("periodType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportPeriodType PeriodType { get; set; }
    
        /// <summary>Идентификатор отчетной формы. Используется для сводных отчетов.</summary>
        [Newtonsoft.Json.JsonProperty("reportTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReportTemplateId { get; set; }
    
        /// <summary>Шаблон наименования файла при экспорте сформированного отчета.</summary>
        [Newtonsoft.Json.JsonProperty("fileNameFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileNameFormat { get; set; }
    
        /// <summary>Параметры шаблона отчётной формы.</summary>
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReportTemplate Template { get; set; }
    
        /// <summary>Признак использования пользовательского параметра.</summary>
        [Newtonsoft.Json.JsonProperty("useReportParameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseReportParameter { get; set; }
    
        /// <summary>Пользовательские параметры используемые при формировании отчета.</summary>
        [Newtonsoft.Json.JsonProperty("reportParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ReportParameter> ReportParameters { get; set; }
    
    
    }
    
    /// <summary>Модель модема.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ModemModel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NullModem")]
        NullModem = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Generic")]
        Generic = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDC_XX14")]
        IDC_XX14 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wavecom")]
        Wavecom = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Siemens")]
        Siemens = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Internet")]
        Internet = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GenericGSM")]
        GenericGSM = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GenericGPRS")]
        GenericGPRS = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GPRS_485")]
        GPRS_485 = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TBN_KSPD5")]
        TBN_KSPD5 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LersGsmLite")]
        LersGsmLite = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarGprs")]
        PulsarGprs = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rx100R")]
        Rx100R = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IRZ")]
        IRZ = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bars02")]
        Bars02 = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LersGsmPlus")]
        LersGsmPlus = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Robustel")]
        Robustel = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MPD")]
        MPD = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IRZ_TC65_Lite")]
        IRZ_TC65_Lite = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ASSV_030")]
        ASSV_030 = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IrzAtm2")]
        IrzAtm2 = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MultiportBars02")]
        MultiportBars02 = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AnComRM")]
        AnComRM = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RX100R4")]
        RX100R4 = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WRX70xR4")]
        WRX70xR4 = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Karat902")]
        Karat902 = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Psm300")]
        Psm300 = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RA300")]
        RA300 = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Telemetric1_1")]
        Telemetric1_1 = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MPD1")]
        MPD1 = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADS99")]
        ADS99 = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RTU102")]
        RTU102 = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gsm12T")]
        Gsm12T = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UsrTcp232T24")]
        UsrTcp232T24 = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UsrGprs232701")]
        UsrGprs232701 = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"K105")]
        K105 = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UsrGprs232730")]
        UsrGprs232730 = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mur1001_9GsmGprsTlt")]
        Mur1001_9GsmGprsTlt = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ProBgs2")]
        ProBgs2 = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pulsar2Gprs")]
        Pulsar2Gprs = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LersEth")]
        LersEth = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Resource")]
        Resource = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PulsarGprsV2")]
        PulsarGprsV2 = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Er108LR4U2V2")]
        Er108LR4U2V2 = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WRX70xR4Teleofis")]
        WRX70xR4Teleofis = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LersGsmEnergy")]
        LersGsmEnergy = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IrzAtm21")]
        IrzAtm21 = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Se208Spodes")]
        Se208Spodes = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Se308Spodes")]
        Se308Spodes = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rtu602Analytics")]
        Rtu602Analytics = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Se208Iec")]
        Se208Iec = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Se308Iec")]
        Se308Iec = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rtu602")]
        Rtu602 = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"El2100")]
        El2100 = 54,
    
    }
    
    /// <summary>Протокол для каналов связи Интернет.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum InternetProtocol
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Tcp")]
        Tcp = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Udp")]
        Udp = 1,
    
    }
    
    /// <summary>Вид тарификации.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum BillingModel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PerSecond")]
        PerSecond = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PerMinute")]
        PerMinute = 1,
    
    }
    
    /// <summary>Описывает объект системы "Порт опроса".</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PollPort 
    {
        /// <summary>Уникальный идентификатор.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Идентификатор службы опроса, к которой относится порт.</summary>
        [Newtonsoft.Json.JsonProperty("pollServiceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PollServiceId { get; set; }
    
        /// <summary>Наименование порта опроса.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>Номер COM-порта.</summary>
        [Newtonsoft.Json.JsonProperty("portNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PortNumber { get; set; }
    
        /// <summary>Канал связи порта.</summary>
        [Newtonsoft.Json.JsonProperty("commLinkType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommunicationLink CommLinkType { get; set; }
    
        /// <summary>Модель модема, подключенного к порту опроса.</summary>
        [Newtonsoft.Json.JsonProperty("modemModel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModemModel ModemModel { get; set; }
    
        /// <summary>Признак того, что порт разрешен к использованию.</summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; }
    
        /// <summary>Префикс набора номера.</summary>
        [Newtonsoft.Json.JsonProperty("dialPrefix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DialPrefix { get; set; }
    
        /// <summary>IP-адрес, на котором Служба опроса должна принимать подключения от GPRS-модемов.</summary>
        [Newtonsoft.Json.JsonProperty("gprsListenIpAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GprsListenIpAddress { get; set; }
    
        /// <summary>Номер TCP-порта, на котором Служба опроса должна принимать подключения от GPRS-модемов.</summary>
        [Newtonsoft.Json.JsonProperty("gprsListenPort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int GprsListenPort { get; set; }
    
        /// <summary>Протокол для входящих подключений (TCP или UDP).</summary>
        [Newtonsoft.Json.JsonProperty("gprsProtocol", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InternetProtocol GprsProtocol { get; set; }
    
        /// <summary>Максимальное количество подключений, обрабатываемых портом опроса (для портов опроса с каналом связи Интернет или GPRS).</summary>
        [Newtonsoft.Json.JsonProperty("maxConnectionsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxConnectionsCount { get; set; }
    
        /// <summary>Использовать программный контроль установки/разрыва связи модемом.</summary>
        [Newtonsoft.Json.JsonProperty("softwareCarrierControl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SoftwareCarrierControl { get; set; }
    
        /// <summary>Комментарий.</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        /// <summary>Группа портов опроса.</summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroupId { get; set; }
    
        /// <summary>Механизм тарификации (посекундная, поминутная).</summary>
        [Newtonsoft.Json.JsonProperty("billingModel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BillingModel BillingModel { get; set; }
    
        /// <summary>Количество минут, включённых в тарифный план.</summary>
        [Newtonsoft.Json.JsonProperty("tariffPlanIncludedMinutes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TariffPlanIncludedMinutes { get; set; }
    
        /// <summary>Дата, до которой заблокирован порт.</summary>
        [Newtonsoft.Json.JsonProperty("blockTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? BlockTimeout { get; set; }
    
        /// <summary>Причина блокировки.</summary>
        [Newtonsoft.Json.JsonProperty("blockReason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BlockReason { get; set; }
    
        /// <summary>Остаток секунд из пакета.</summary>
        [Newtonsoft.Json.JsonProperty("tariffPlanRestSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TariffPlanRestSeconds { get; set; }
    
        /// <summary>Дата пополнения пакета минут.</summary>
        [Newtonsoft.Json.JsonProperty("tariffPlanRestoreDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TariffPlanRestoreDay { get; set; }
    
        /// <summary>Блокировать порт после истечения количества минут в тарифе.</summary>
        [Newtonsoft.Json.JsonProperty("blockWhenMinutesExpired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BlockWhenMinutesExpired { get; set; }
    
    
    }
    
    /// <summary>Параметры копирования данных.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MeasurePointDataCopySettings 
    {
        /// <summary>Копируемый параметр.</summary>
        [Newtonsoft.Json.JsonProperty("dataParameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DataParameter DataParameter { get; set; }
    
        /// <summary>Идентификатор исходной точки учёта.</summary>
        [Newtonsoft.Json.JsonProperty("sourceMeasurePointId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SourceMeasurePointId { get; set; }
    
    
    }
    
    /// <summary>Выражение для расчетной точки учета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ParameterExpression 
    {
        /// <summary>Расчетный параметр.</summary>
        [Newtonsoft.Json.JsonProperty("dataParameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DataParameter DataParameter { get; set; }
    
        /// <summary>Выражение.</summary>
        [Newtonsoft.Json.JsonProperty("expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expression { get; set; }
    
    
    }
    
    /// <summary>Ответ на запрос информации по конкретной точке учета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetMeasurePointResponseParameters 
    {
        /// <summary>Свойства точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("measurePoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MeasurePoint MeasurePoint { get; set; }
    
        /// <summary>Привязка каналов устройства.</summary>
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeviceChannelObject> Channels { get; set; }
    
        /// <summary>Привязка ячеек.</summary>
        [Newtonsoft.Json.JsonProperty("cells", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeviceCellObject> Cells { get; set; }
    
        /// <summary>Привязка адресов памяти.</summary>
        [Newtonsoft.Json.JsonProperty("addressMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeviceAddressObject> AddressMap { get; set; }
    
        /// <summary>Режим работы объекта учета.</summary>
        [Newtonsoft.Json.JsonProperty("isHeatingSeason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsHeatingSeason { get; set; }
    
        /// <summary>Параметры диагностики на нештатные ситуации для зимнего режима.</summary>
        [Newtonsoft.Json.JsonProperty("diagWinterParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DiagParam> DiagWinterParams { get; set; }
    
        /// <summary>Параметры диагностики на нештатные ситуации для летнего режима.</summary>
        [Newtonsoft.Json.JsonProperty("diagSummerParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DiagParam> DiagSummerParams { get; set; }
    
        /// <summary>Таблица с заданиями на опрос, через которые опрашивается точка учета.</summary>
        [Newtonsoft.Json.JsonProperty("pollTaskList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PollTask> PollTaskList { get; set; }
    
        /// <summary>Параметры резервного опроса.</summary>
        [Newtonsoft.Json.JsonProperty("backupPoll", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BackupPollSettings BackupPoll { get; set; }
    
        /// <summary>Теплопотери.</summary>
        [Newtonsoft.Json.JsonProperty("heatLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HeatLoss> HeatLoss { get; set; }
    
        /// <summary>Список имеющихся отчетных форм, которые можно назначать точкам учета (Ведомость параметров и Акты).</summary>
        [Newtonsoft.Json.JsonProperty("availableReportTemplates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ReportTemplate> AvailableReportTemplates { get; set; }
    
        /// <summary>Список датчиков точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("sensorList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sensor> SensorList { get; set; }
    
        /// <summary>Отчетные формы, назначенные точке учета.</summary>
        [Newtonsoft.Json.JsonProperty("reports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MeasurePointReport> Reports { get; set; }
    
        /// <summary>Список имеющихся отчетов, для которых отчетные формы назначаются в свойствах точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("reportsWithAvailableReportTemplates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Report> ReportsWithAvailableReportTemplates { get; set; }
    
        /// <summary>Список оборудования на объекте учёта.</summary>
        [Newtonsoft.Json.JsonProperty("nodeEquipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetEquipmentListResponseParameters NodeEquipment { get; set; }
    
        /// <summary>Оборудование счетчика.</summary>
        [Newtonsoft.Json.JsonProperty("counter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Equipment Counter { get; set; }
    
        /// <summary>Модель оборудования счетчика.</summary>
        [Newtonsoft.Json.JsonProperty("counterModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EquipmentModel CounterModel { get; set; }
    
        /// <summary>Давление в подающей магистрали по умолчанию (избыточное), ат.</summary>
        [Newtonsoft.Json.JsonProperty("defaultSupplyPressure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DefaultSupplyPressure { get; set; }
    
        /// <summary>Давление в обратной магистрали по умолчанию (избыточное), ат.</summary>
        [Newtonsoft.Json.JsonProperty("defaultReturnPressure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DefaultReturnPressure { get; set; }
    
        /// <summary>Порты опроса.</summary>
        [Newtonsoft.Json.JsonProperty("pollPorts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PollPort> PollPorts { get; set; }
    
        /// <summary>Объект учета.</summary>
        [Newtonsoft.Json.JsonProperty("node", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Node Node { get; set; }
    
        /// <summary>Список атрибутов, заданных для точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MeasurePointCustomAttribute> Attributes { get; set; }
    
        /// <summary>Параметры копирования данных.</summary>
        [Newtonsoft.Json.JsonProperty("dataCopySettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MeasurePointDataCopySettings> DataCopySettings { get; set; }
    
        /// <summary>Выражения для расчетной точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("expressions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ParameterExpression> Expressions { get; set; }
    
    
    }
    
    /// <summary>Атрибуты записи с интеграторами.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum TotalsRecordAttributes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HourTotals")]
        HourTotals = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DayTotals")]
        DayTotals = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MonthTotals")]
        MonthTotals = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CurrentTotals")]
        CurrentTotals = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExternalData")]
        ExternalData = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TenantInput")]
        TenantInput = 6,
    
    }
    
    /// <summary>Запись с данными об показаниях интеграторов.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MeasurePointDataTotalsRecord 
    {
        /// <summary>Дата и время.</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DateTime { get; set; }
    
        /// <summary>Список атрибутов записи.</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TotalsRecordAttributes Attributes { get; set; }
    
        /// <summary>Тип ресурса к которому относится запись с данными.</summary>
        [Newtonsoft.Json.JsonProperty("resourceKind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResourceKind ResourceKind { get; set; }
    
        /// <summary>Возвращает значение, определяющее, является ли запись пустой (отсутствующей).</summary>
        [Newtonsoft.Json.JsonProperty("isEmpty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsEmpty { get; set; }
    
        /// <summary>Записи с данными о потреблении.</summary>
        [Newtonsoft.Json.JsonProperty("dataParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DataParameterValue> DataParameters { get; set; }
    
    
    }
    
    /// <summary>Ответ на получение записей с показаниями</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetMeasurePointTotalsResponse 
    {
        /// <summary>Записи с интеграторами</summary>
        [Newtonsoft.Json.JsonProperty("totals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MeasurePointDataTotalsRecord> Totals { get; set; }
    
        /// <summary>Единицы измерения для категории параметров.</summary>
        [Newtonsoft.Json.JsonProperty("dataParametersUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DataParametersUnitPair> DataParametersUnit { get; set; }
    
    
    }
    
    /// <summary>Параметры запроса сохранения интеграторов по точке учёта.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SaveTotalsRequestParameters 
    {
        /// <summary>Список данных интеграторов для сохранения.</summary>
        [Newtonsoft.Json.JsonProperty("totalsRecordObjects", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MeasurePointDataTotalsRecord> TotalsRecordObjects { get; set; } = new System.Collections.ObjectModel.Collection<MeasurePointDataTotalsRecord>();
    
        /// <summary>Единицы измерения, в которых передаются величины для сохранения (необязательный параметр).</summary>
        [Newtonsoft.Json.JsonProperty("unitsOfMeasurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UnitOfMeasurementObject> UnitsOfMeasurement { get; set; }
    
    
    }
    
    /// <summary>Территория.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Territory 
    {
        /// <summary>Идентификатор.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Идентификатор родительской территории.</summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentId { get; set; }
    
        /// <summary>Наименование территории.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string Name { get; set; }
    
        /// <summary>Смещение часового пояса.</summary>
        [Newtonsoft.Json.JsonProperty("timeZoneOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TimeZoneOffset { get; set; }
    
        /// <summary>Идентификатор точки учёта, из которой копируется Тнв для территории.</summary>
        [Newtonsoft.Json.JsonProperty("copyMeasurePointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CopyMeasurePointId { get; set; }
    
        /// <summary>Массив значения нормативных температур наружного воздуха
        /// MonthStdTemperature[0] - Январь
        /// MonthStdTemperature[1] - Февраль
        /// . . . 
        /// MonthStdTemperature[11] - Декабрь</summary>
        [Newtonsoft.Json.JsonProperty("monthStdTemperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> MonthStdTemperature { get; set; }
    
    
    }
    
    /// <summary>Запись от температуре наружного воздуха для территории на указанную дату.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TerritoryOutdoorTemperature 
    {
        /// <summary>Дата, на которую зафиксирована температура.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>Значение температуры.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Value { get; set; }
    
    
    }
    
    /// <summary>Типы сущностей.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum EntityType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Empty")]
        Empty = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Equipment")]
        Equipment = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MeasurePoint")]
        MeasurePoint = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Account")]
        Account = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PollSession")]
        PollSession = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Task")]
        Task = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TaskLog")]
        TaskLog = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PollSessionLog")]
        PollSessionLog = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SystemParameter")]
        SystemParameter = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CurrentData")]
        CurrentData = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AccountGroup")]
        AccountGroup = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ClientType")]
        ClientType = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CalculatedData")]
        CalculatedData = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PollPort")]
        PollPort = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Incident")]
        Incident = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ClientSession")]
        ClientSession = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Reserved_1")]
        Reserved_1 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NodeGroup")]
        NodeGroup = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCompany")]
        ServiceCompany = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"House")]
        House = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Room")]
        Room = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ReportTemplate")]
        ReportTemplate = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BalanceLog")]
        BalanceLog = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PollTask")]
        PollTask = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Map")]
        Map = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Customer")]
        Customer = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SensorType")]
        SensorType = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ClientSessionLog")]
        ClientSessionLog = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Report")]
        Report = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Supplier")]
        Supplier = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EquipmentModel")]
        EquipmentModel = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ReportGeneratingTask")]
        ReportGeneratingTask = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PollPortGroup")]
        PollPortGroup = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AccountLog")]
        AccountLog = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttribute")]
        CustomAttribute = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Announcement")]
        Announcement = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BalanceGroup")]
        BalanceGroup = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NodeJob")]
        NodeJob = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MessageLog")]
        MessageLog = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PreparedReport")]
        PreparedReport = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SummaryCurrentsMonitor")]
        SummaryCurrentsMonitor = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PollService")]
        PollService = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ReportParameterProperty")]
        ReportParameterProperty = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ReportParameter")]
        ReportParameter = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ServicingStatus")]
        ServicingStatus = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Diagram")]
        Diagram = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SystemLog")]
        SystemLog = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Inspector")]
        Inspector = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NodeSignal")]
        NodeSignal = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 50,
    
    }
    
    /// <summary>Тип операции, которая было произведена над сущностью.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum EntityOperationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Updated")]
        Updated = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 3,
    
    }
    
    /// <summary>Параметры уведомления об изменения сущности.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EntityChangedNotifyParameters 
    {
        /// <summary>Тип сущности.</summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        /// <summary>Идентификатор сущности.</summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EntityId { get; set; }
    
        /// <summary>Действие, произошедшее с сущностью.</summary>
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityOperationType Operation { get; set; }
    
        /// <summary>Сериализованные в Json свойства изменившейся сущности.</summary>
        [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Entity { get; set; }
    
        /// <summary>Сериализованные в Json дополнительные данные уведомления.</summary>
        [Newtonsoft.Json.JsonProperty("additionalData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdditionalData { get; set; }
    
    
    }
    
    /// <summary>Код операции.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Operation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditRecord")]
        EditRecord = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EDIT_SYSTEM_PARAMETERS")]
        EDIT_SYSTEM_PARAMETERS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPDATE_POLLTASK_EXECUTION_STATE")]
        UPDATE_POLLTASK_EXECUTION_STATE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INS_POLL_PORT")]
        INS_POLL_PORT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OPEN_POLL_SESSION")]
        OPEN_POLL_SESSION = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOG_POLL_MESSAGE")]
        LOG_POLL_MESSAGE = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLOSE_POLL_SESSION")]
        CLOSE_POLL_SESSION = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SAVE_CURRENT_DATA")]
        SAVE_CURRENT_DATA = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExecuteGsmModemCommand")]
        ExecuteGsmModemCommand = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEND_DEVICE_REQUEST")]
        SEND_DEVICE_REQUEST = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotifyDeviceConnected")]
        NotifyDeviceConnected = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GET_DEVICE_RESPONSE")]
        GET_DEVICE_RESPONSE = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GetUserSessionList")]
        GetUserSessionList = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CloseUserSession")]
        CloseUserSession = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DEL_POLL_PORT")]
        DEL_POLL_PORT = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPD_POLL_PORT")]
        UPD_POLL_PORT = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizePollService")]
        AuthorizePollService = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CloseIncident")]
        CloseIncident = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UpdateSystem")]
        UpdateSystem = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SendMessage")]
        SendMessage = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GetSendMessageParameters")]
        GetSendMessageParameters = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BackupDatabase")]
        BackupDatabase = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InsertMap")]
        InsertMap = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UpdateMap")]
        UpdateMap = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeleteMap")]
        DeleteMap = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GetMap")]
        GetMap = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ENTITY_CHANGED")]
        ENTITY_CHANGED = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOCK_ENTITY")]
        LOCK_ENTITY = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNLOCK_ENTITY")]
        UNLOCK_ENTITY = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditReportTemplate")]
        EditReportTemplate = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GET_CONSUMPTION_NODE")]
        GET_CONSUMPTION_NODE = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOTIFY_LICENSE_CHANGED")]
        NOTIFY_LICENSE_CHANGED = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GetPollPortStatus")]
        GetPollPortStatus = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AddPlugin")]
        AddPlugin = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeletePlugin")]
        DeletePlugin = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DEVICE_ONLINE_CHANGED")]
        DEVICE_ONLINE_CHANGED = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GetUserSessionListLog")]
        GetUserSessionListLog = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GET_LOGIN_EXTRA_INFO")]
        GET_LOGIN_EXTRA_INFO = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NODE_BATCH_OPERATION")]
        NODE_BATCH_OPERATION = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEASUREPOINT_BATCH_OPERATION")]
        MEASUREPOINT_BATCH_OPERATION = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TEST_SMTP_SETTINGS")]
        TEST_SMTP_SETTINGS = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SendTestSms")]
        SendTestSms = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GET_MEASUREPOINT_LAST_CONSUMPTION")]
        GET_MEASUREPOINT_LAST_CONSUMPTION = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOTIFY_POLL_LOG_MESSAGE")]
        NOTIFY_POLL_LOG_MESSAGE = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DisconnectGprsController")]
        DisconnectGprsController = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOTIFICATION_CENTER_NEW_ITEM")]
        NOTIFICATION_CENTER_NEW_ITEM = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOTIFICATION_CENTER_DEL_ITEM")]
        NOTIFICATION_CENTER_DEL_ITEM = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GetController")]
        GetController = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotifyControllerIsOnlineChanged")]
        NotifyControllerIsOnlineChanged = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditAnnouncement")]
        EditAnnouncement = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CallGprsController")]
        CallGprsController = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SetSummaryCurrentsMonitorParameters")]
        SetSummaryCurrentsMonitorParameters = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GetSummaryCurrentsMonitorParameters")]
        GetSummaryCurrentsMonitorParameters = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ControlSummaryCurrentsMonitor")]
        ControlSummaryCurrentsMonitor = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ControlMessageQueue")]
        ControlMessageQueue = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SetMeasurePointSensors")]
        SetMeasurePointSensors = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotifyDeviceTimeDifference")]
        NotifyDeviceTimeDifference = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GetReportParameterByReportId")]
        GetReportParameterByReportId = 58,
    
    }
    
    /// <summary>Параметры уведомления для какой-либо сущности.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NotificationParameters 
    {
        /// <summary>Идентификатор сущности.</summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EntityId { get; set; }
    
        /// <summary>Тип сущности.</summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        /// <summary>Данные, сериализованные в Json.</summary>
        [Newtonsoft.Json.JsonProperty("jsonData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JsonData { get; set; }
    
    
    }
    
    /// <summary>Считанные данные с текущим потреблением по точке учёта</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CurrentConsumptionDataRead 
    {
        /// <summary>Идентификатор точки учета.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointId { get; set; }
    
        /// <summary>Считанные данные с текущим потреблением.</summary>
        [Newtonsoft.Json.JsonProperty("consumption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MeasurePointDataConsumptionRecord Consumption { get; set; }
    
    
    }
    
    /// <summary>Тип объекта карты.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MapObjectType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Line")]
        Line = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rectangle")]
        Rectangle = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ellipse")]
        Ellipse = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Polyline")]
        Polyline = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Label")]
        Label = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Image")]
        Image = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"State")]
        State = 6,
    
    }
    
    /// <summary>Тип оформления объекта мнемосхемы.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MapObjectAppearanceType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SingalIsSet")]
        SingalIsSet = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SignalIsUnset")]
        SignalIsUnset = 2,
    
    }
    
    /// <summary>Оформление объекта мнемосхемы.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MapObjectAppearance 
    {
        /// <summary>Идентификатор объекта мнемосхемы, которому принадлежит оформление.</summary>
        [Newtonsoft.Json.JsonProperty("mapObjectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MapObjectId { get; set; }
    
        /// <summary>Тип оформления (для какого случая оно используется).</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MapObjectAppearanceType Type { get; set; }
    
        /// <summary>Цвет границы.</summary>
        [Newtonsoft.Json.JsonProperty("borderColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BorderColor { get; set; }
    
        /// <summary>Толщина границы.</summary>
        [Newtonsoft.Json.JsonProperty("borderWidth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BorderWidth { get; set; }
    
        /// <summary>Цвет заливки.</summary>
        [Newtonsoft.Json.JsonProperty("fillColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FillColor { get; set; }
    
        /// <summary>Вертикальное выравнивание текста.</summary>
        [Newtonsoft.Json.JsonProperty("textVAlignment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TextVAlignment { get; set; }
    
        /// <summary>Горизонтальное выравнивание текста.</summary>
        [Newtonsoft.Json.JsonProperty("textHAlignment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TextHAlignment { get; set; }
    
        /// <summary>Цвет текста.</summary>
        [Newtonsoft.Json.JsonProperty("fontColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FontColor { get; set; }
    
        /// <summary>Размер шрифта.</summary>
        [Newtonsoft.Json.JsonProperty("fontSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float FontSize { get; set; }
    
        /// <summary>Наименование шрифта.</summary>
        [Newtonsoft.Json.JsonProperty("fontFamily", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FontFamily { get; set; }
    
        /// <summary>Стиль начертания шрифта.</summary>
        [Newtonsoft.Json.JsonProperty("fontStyle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FontStyle { get; set; }
    
        /// <summary>Видимость объекта на мнемосхеме.</summary>
        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Visible { get; set; }
    
    
    }
    
    /// <summary>Представляет объект мнемосхемы.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MapObject 
    {
        /// <summary>Идентификатор объекта в базе данных.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Идентификатор мнемосхемы, которой принадлежит данный объект.</summary>
        [Newtonsoft.Json.JsonProperty("mapId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MapId { get; set; }
    
        /// <summary>Тип объекта.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MapObjectType Type { get; set; }
    
        /// <summary>Идентификатор точки учета, с которой связан данный объект.</summary>
        [Newtonsoft.Json.JsonProperty("measurePointId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MeasurePointId { get; set; }
    
        /// <summary>Координата объекта по оси OX.</summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int X { get; set; }
    
        /// <summary>Координата объекта по оси OY.</summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Y { get; set; }
    
        /// <summary>Размер объекта по оси OX.</summary>
        [Newtonsoft.Json.JsonProperty("dX", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DX { get; set; }
    
        /// <summary>Размер объекта по оси OY.</summary>
        [Newtonsoft.Json.JsonProperty("dY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DY { get; set; }
    
        /// <summary>Текст.</summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }
    
        /// <summary>Дополнительные параметры.</summary>
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tag { get; set; }
    
        /// <summary>Контрольная сумма картинки.</summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Image { get; set; }
    
        /// <summary>Измеряемый параметр на точке учета.</summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }
    
        /// <summary>Объект заблокирован от перемещения и изменения размера.</summary>
        [Newtonsoft.Json.JsonProperty("locked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Locked { get; set; }
    
        /// <summary>Порядок наложения объекта по оси Z (Z-order).</summary>
        [Newtonsoft.Json.JsonProperty("zOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ZOrder { get; set; }
    
        /// <summary>Привязка к сигнализации на объекте учета.</summary>
        [Newtonsoft.Json.JsonProperty("nodeSignalingId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NodeSignalingId { get; set; }
    
        /// <summary>Оформления объекта мнемосхемы.</summary>
        [Newtonsoft.Json.JsonProperty("appearances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MapObjectAppearance> Appearances { get; set; }
    
    
    }
    
    /// <summary>Ответ на запрос получения объектов мнемосхемы.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetMapObjectsResponseParameters 
    {
        /// <summary>Наименование мнемосхемы.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>Указывает что мнемосхема общедоступная.</summary>
        [Newtonsoft.Json.JsonProperty("isPublic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPublic { get; set; }
    
        /// <summary>Список всех используемых на мнемосхемах изображений.</summary>
        [Newtonsoft.Json.JsonProperty("allMapImages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> AllMapImages { get; set; }
    
        /// <summary>Таблица с объектами мнемосхем.</summary>
        [Newtonsoft.Json.JsonProperty("mapObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MapObject> MapObjects { get; set; }
    
        /// <summary>Список оформлений объектов на карте.</summary>
        [Newtonsoft.Json.JsonProperty("appearance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MapObjectAppearance> Appearance { get; set; }
    
    
    }
    
    /// <summary>Ответ на запрос размера изображения мнемосхемы.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetMapImageLengthResponseParameters 
    {
        /// <summary>Размер изображения.</summary>
        [Newtonsoft.Json.JsonProperty("imageLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ImageLength { get; set; }
    
    
    }
    
    /// <summary>Ответ на запрос изображения мнемосхемы.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetMapImageResponseParameters 
    {
        /// <summary>Данные изображения.</summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Image { get; set; }
    
    
    }
    
    /// <summary>Действие для операции получения мнемосхемы.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum GetMapAction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"GetMapList")]
        GetMapList = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GetMapObjects")]
        GetMapObjects = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GetImage")]
        GetImage = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GetImageLength")]
        GetImageLength = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GetMapListAllowed")]
        GetMapListAllowed = 4,
    
    }
    
    /// <summary>Параметры запроса на получение мнемосхемы.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GetMapRequestParameters 
    {
        /// <summary>Действие.</summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetMapAction Action { get; set; }
    
        /// <summary>Идентификатор карты.</summary>
        [Newtonsoft.Json.JsonProperty("mapId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MapId { get; set; }
    
        /// <summary>Контрольная сумма картинки.</summary>
        [Newtonsoft.Json.JsonProperty("imageChecksum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ImageChecksum { get; set; }
    
        /// <summary>Смещение в файле картинки.</summary>
        [Newtonsoft.Json.JsonProperty("imageOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ImageOffset { get; set; }
    
        /// <summary>Размер блока чтения картинки.</summary>
        [Newtonsoft.Json.JsonProperty("imageLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ImageLength { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MeasuredParameterUnitCollection 
    {
        [Newtonsoft.Json.JsonProperty("None", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit None { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Temperature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit Temperature { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Pressure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit Pressure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Mass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit Mass { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Volume", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit Volume { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Heat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit Heat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit Time { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ActiveElectricalEnergy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit ActiveElectricalEnergy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReactiveElectricalEnergy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit ReactiveElectricalEnergy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ActiveElectricPower", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit ActiveElectricPower { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReactiveElectricPower", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit ReactiveElectricPower { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ApparentElectricPower", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit ApparentElectricPower { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Voltage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit Voltage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ElectricCurrent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit ElectricCurrent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PhaseAngle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit PhaseAngle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PowerFactor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit PowerFactor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit Frequency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WaterLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit WaterLevel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PressureDrop", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit PressureDrop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValvePercent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit ValvePercent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Coefficient", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit Coefficient { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class LersException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public LersException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class LersException<TResult> : LersException
    {
        public TResult Result { get; private set; }

        public LersException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108